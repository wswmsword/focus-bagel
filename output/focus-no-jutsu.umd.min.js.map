{"version":3,"file":"focus-no-jutsu.umd.min.js","sources":["../utils.js","../index.js"],"sourcesContent":["/** Object.prototype.toString.call 快捷方式 */\nexport const objToStr = obj => Object.prototype.toString.call(obj);\n\n/** 参数是否是对象 */\nexport const isObj = obj => objToStr(obj) === \"[object Object]\";\n\n/** 是否为函数 */\nexport const isFun = fun => objToStr(fun) === \"[object Function]\";\n\n/** document.activeElement 的快捷方式 */\nexport const getActiveElement = () => document.activeElement;\n\n/** document.querySelector 的快捷方式 */\nexport const querySelector = str => document.querySelector(str);\n\n/** 通过字符串查找节点，或者直接返回节点 */\nexport const element = e => typeof e === \"string\" ? querySelector(e) : e;\n\n/** 滴答 */\nexport const tick = function(fn) {\n  setTimeout(fn, 0);\n};\n\n/** 是否是 input 可 select 的元素 */\nexport const isSelectableInput = function(node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\n/** 是否按下了 enter */\nexport const isEnterEvent = function(e) {\n  return e.key === \"Enter\" || e.keyCode === 13;\n};\n\n/** 按键是否是 esc */\nexport const isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\n/** 按键是否是 tab */\nexport const isTabEvent = function(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n/** 是否是向前的 tab */\nexport const isTabForward = function(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n/** 是否是向后的 tab */\nexport const isTabBackward = function(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\n/** 找到两个元素的最小公共祖先元素 */\nexport const findLowestCommonAncestorNode = function(x, y) {\n  if (x == null || y == null) return null;\n  if (x.contains(y)) return x;\n  if (y.contains(x)) return y;\n\n  const range = new Range();\n  range.setStartBefore(x);\n  range.setEndAfter(y);\n  if (range.collapsed) {\n     range.setStartBefore(y);\n     range.setEndAfter(x);\n  }\n  return range.commonAncestorContainer;\n};","import { objToStr, isObj, isFun, getActiveElement, element, tick, isSelectableInput, isEnterEvent, isEscapeEvent, isTabForward, isTabBackward, findLowestCommonAncestorNode } from \"./utils\";\nlet isDemo = false;\n/** 聚焦，如果是 input，则聚焦后选中 */\nconst focus = function(e) {\n  e.focus();\n  if (isSelectableInput(e))\n    e.select();\n  return true;\n};\n\n/** 尝试聚焦，如果聚焦失效，则下个 setTimeout 再次聚焦 */\nconst tickFocus = async function(e) {\n  return new Promise(resolve => {\n    if (e == null) tick(() => resolve(e && focus(e)));\n    else resolve(focus(e));\n  });\n};\n\n/** 手动聚焦下一个元素 */\nconst focusNextListItemBySequence = (subNodes, useActiveIndex, usePrevActive, isClamp, isNext, isPrev, onNext, onPrev, coverNode, onMove, trappedList) => e => {\n  if (e.target === coverNode) return;\n  if (!trappedList()) return;\n\n  const [index_, setIndex] = useActiveIndex();\n  const [, setPrev] = usePrevActive();\n  const index = Math.max(0, index_);\n  const itemsLen = subNodes.length;\n  if ((isNext ?? isTabForward)(e)) {\n    const incresedI = index + 1;\n    let nextI = isClamp ? Math.min(itemsLen - 1, incresedI) : incresedI;\n    nextI %= itemsLen;\n    onNext?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    onMove?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    setIndex(nextI);\n    setPrev(index);\n    focus(subNodes[nextI]);\n    e.preventDefault();\n  }\n  else if ((isPrev ?? isTabBackward)(e)) {\n    const decresedI = index - 1;\n    let nextI = isClamp ? Math.max(0, decresedI) : decresedI;\n    nextI = (nextI + itemsLen) % itemsLen;\n    onPrev?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    onMove?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    setIndex(nextI);\n    setPrev(index);\n    focus(subNodes[nextI]);\n    e.preventDefault();\n  }\n};\n\n/** 按下 tab，以浏览器的行为聚焦下个元素 */\nconst focusNextListItemByRange = (list, isClamp, onNext, onPrev, rootNode, coverNode, trappedList) => e => {\n  const head = list[0];\n  const tail = list.at(-1);\n  const current = e.target;\n  if (current === coverNode) return;\n  if (!trappedList()) return;\n\n  if (isTabForward(e)) {\n    onNext?.({ e });\n    if (current === tail) {\n      e.preventDefault();\n      if (!isClamp) focus(head);\n    }\n    if (current === rootNode) {\n      e.preventDefault();\n      focus(head)\n    }\n  }\n  else if (isTabBackward(e)) {\n    onPrev?.({ e });\n    if (current === head) {\n      e.preventDefault();\n      if (!isClamp) focus(tail);\n    }\n    if (current === rootNode) {\n      e.preventDefault();\n      focus(tail);\n    }\n  }\n};\n\n/** 获取关键节点 */\nconst getKeyNodes = function(root, list, cover, coverIsRoot) {\n  const _list = list.map(item => element(item)).filter(item => item != null);\n  const head = _list[0];\n  const tail = _list.slice(-1)[0];\n  const _root = element(root) ?? findLowestCommonAncestorNode(head, tail);\n  const _cover = coverIsRoot ? _root : element(cover);\n\n  return {\n    rootNode: _root,\n    subNodes: _list,\n    head,\n    tail,\n    coverNode: _cover,\n  };\n};\n\n/** 用于处理节点属性可以传递数组的情况，用于入口和出口 */\nconst nodesReducer = function(acc, cur) {\n  const isAryNodes = Array.isArray(cur.node);\n  const nodes = isAryNodes ? cur.node.map(n => ({\n    ...cur,\n    node: n,\n  })) : cur;\n  return acc.concat(nodes);\n};\n\n/** 获取分割的出口 */\nconst splitExits = function(exits, root) {\n  /** 生效的节点是否在根元素内部（列表中） */\n  const isInnerRoot = node => (node != null && root.contains(element(node))) || node == null;\n\n  const [keyExits, clickExits, focusExits, clickExits_wild, focusExits_wild, outListExits] = exits.reduce((acc, e) => {\n    let [key, click, focus, click_wild, focus_wild, outList] = acc;\n    const includeType = type => e.type?.includes(type);\n    if (isInnerRoot(e.node)) {\n      if (includeType(\"keydown\")) key = key.concat(e);\n      if (includeType(\"click\")) click = click.concat(e);\n      if (includeType(\"focus\")) focus = focus.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    } else {\n      if (includeType(\"click\")) click_wild = click_wild.concat(e);\n      if (includeType(\"focus\")) focus_wild = focus_wild.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    }\n    return [key, click, focus, click_wild, focus_wild, outList];\n  }, new Array(6).fill([]));\n\n  const hasClickExits = clickExits.length > 0;\n  const hasFocusExits = focusExits.length > 0;\n  const hasKeyExits = keyExits.length > 0;\n  \n  return {\n    keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n    clickExits_wild, focusExits_wild,\n    outListExits,\n  };\n}\n\n/** 获取（生成）出口 */\nconst getExits = function(exit, onEscape, enabledCover, cover, trigger) {\n\n  let tempExits = [].concat(exit).filter(o => o != null)\n    .map(ele => isObj(ele) ? ele : { node: ele })\n    .map(e => ({\n      ...e,\n      // undefined 表示用户没有主动设置\n      type: e.type === undefined ? [e.key == null ? '' : \"keydown\", e.node == null ? '' : \"click\"].filter(t => t !== '') : [].concat(e.type),\n    }))\n    .reduce(nodesReducer, []);\n  let _onEscape = isFun(onEscape) ? onEscape : onEscape === true ? tempExits[0]?.on ?? (() => {}) : onEscape;\n  /** 按下 esc 的出口 */\n  const escapeExit = isFun(_onEscape) ? {\n    node: null,\n    key: isEscapeEvent,\n    on: _onEscape,\n    target: enabledCover ? cover : trigger,\n    type: [\"keydown\"],\n  } : null;\n  const exits = [escapeExit].concat(tempExits).filter(e => e != null);\n\n  return exits;\n};\n\n/** 获取聚焦或失焦时延迟的类型 */\nconst getDelayType = function(delay) {\n  const isFunctionDelay = isFun(delay);\n  const delayRes = isFunctionDelay && delay(() => {});\n  const promiseDelay = isFunctionDelay && objToStr(delayRes) === \"[object Promise]\";\n  const callbackDelay = isFunctionDelay && !promiseDelay;\n  const commonDelay = (delay === true) && !promiseDelay && !callbackDelay;\n  return {\n    promiseDelay,\n    callbackDelay,\n    commonDelay,\n  };\n};\n\n/** 延迟执行某些操作 */\nconst delayToProcess = async function(delay, processor) {\n\n  const { promiseDelay, callbackDelay, commonDelay } = !!delay ? getDelayType(delay) : {};\n  if (promiseDelay) {\n    await delay(() => {});\n    processor();\n  }\n  else if (callbackDelay) delay(processor);\n  else if (commonDelay) processor();\n  else return true;\n};\n\n/** 获取出口或者入口的目标 */\nconst getTarget = function(target, cover, list, root, enabledCover, activeIndex, defaultTarget, e) {\n  // 空 target 走默认\n  if (target == null || target === true) {\n    if (enabledCover) return cover;\n    else return defaultTarget;\n  }\n  // 函数 target 则传入节点执行\n  else if (isFun(target)) {\n    const gotTarget = target({ e, list, cover, root, last: list[activeIndex], lastI: activeIndex });\n    if (gotTarget == null || gotTarget === true) {\n      if (enabledCover) return cover;\n      else return defaultTarget;\n    }\n    return gotTarget;\n  }\n  // 选择器字符串或者节点，则直接获取\n  else return element(target);\n};\n\n/** 保存的监听事件信息，方便监听和移除监听 */\nclass ListenersCache {\n  cache = [];\n  isEmpty = true;\n  push(node, type, handler) {\n    this.isEmpty = false;\n    this.cache.push({\n      node,\n      type,\n      handler,\n    });\n  }\n  clean() {\n    this.cache = [];\n    this.isEmpty = true;\n  }\n  addListeners() {\n    this.cache.forEach(l => l.node?.addEventListener(l.type, l.handler));\n  }\n  removeListeners() {\n    this.cache.forEach(l => l.node?.removeEventListener(l.type, l.handler));\n    this.clean();\n  }\n}\n\n/** 按键转发的缓存 */\nclass KeyForwardCache {\n  cache = new Map();\n  has(id) {\n    return this.cache.has(id);\n  }\n  push(id, node, handler) {\n    if (this.has(id)) return;\n    node.addEventListener(\"keydown\", handler);\n    this.cache.set(id, {\n      node,\n      handler,\n    })\n  }\n  remove(id) {\n    const ids = [].concat(id);\n    ids.forEach(id => this.cache.get(id).node.removeEventListener(\"keydown\", this.cache.get(id).handler));\n  }\n}\n\n/** 保存列表数据 */\nclass TabList {\n  data = [];\n  head = null;\n  tail = null;\n  update(list) {\n    this.data.splice(0, this.data.length);\n    Array.prototype.push.apply(this.data, list);\n    this.head = list[0];\n    this.tail = list.at(-1);\n  };\n  isEmpty() {\n    return this.data.length === 0;\n  };\n  has(i) {\n    return !!this.data[i];\n  }\n}\n\nconst focusNoJutsu = (...props) => {\n  const offset = 0 - (props[0] instanceof Array);\n  const rootNode = props[0 + offset];\n  const subNodes = props[1 + offset];\n  const options  = props[2 + offset] ?? {};\n\n  if (!(Array.isArray(subNodes) && subNodes.length > 1))\n    throw new Error(\"请至少传入一个数组，数组至少包含两个可聚焦元素，用来表示列表的头和尾。\");\n\n  const {\n    /** move: tab 序列，指定可以聚焦的元素，聚焦 list 内的元素 */\n    sequence,\n    /** move: 是否循环，设置后，尾元素的下个焦点是头元素，头元素的上个焦点是尾元素 */\n    loop,\n    /** move: 自定义前进焦点函数 */\n    next,\n    /** move: 自定义后退焦点函数 */\n    prev,\n    /** focus/blur: 触发器，如果使用 focusNoJutsu.enter 则不用设置，如果使用 entry.selector 则不用设置 */\n    trigger,\n    /** focus: 触发触发器的配置 */\n    entry,\n    /** blur: 触发退出触发器的配置 */\n    exit,\n    /** blur: 按下 esc 的行为，如果未设置，则取 exit.on */\n    onEscape,\n    /** 点击列表单项的响应，行为 */\n    onClick,\n    /** 移动的时候触发 */\n    onMove,\n    /** cover: 封面，默认情况，触发入口后首先聚焦封面，而不是子元素 */\n    cover,\n    /** 初始的 activeIndex */\n    initialActive,\n    /** 矫正列表的焦点 */\n    correctionTarget,\n    /** 延迟挂载非触发器元素的事件，可以是一个返回 promise 的函数，可以是一个接收回调函数的函数 */\n    delayToFocus,\n    /** 延迟失焦，触发出口后等待执行 delayToBlur 完成后失焦 */\n    delayToBlur,\n    /** 每次退出列表回到入口是否移除列表事件 */\n    removeListenersEachExit = true,\n    /** 每次进入列表是否移除入口事件 */\n    removeListenersEachEnter,\n    /** 手动添加和移除监听事件，入口、列表、出口的监听事件，`removeListenersEachExit` 和 `removeListenersEachEnter` 将失效 */\n    manual,\n    /** 用于抹平 Safari 不同于其它浏览器，点击后 button 之类的元素不会被聚焦的问题 */\n    allowSafariToFocusAfterMousedown = true,\n    /** 用于内部调试 */\n    demo = false,\n  } = options;\n  isDemo = demo;\n\n  const {\n    /** 封面节点 */\n    node: coverNode,\n    enterKey: coverEnterKey,\n    onEnter: onEnterCover,\n    exit: exitCover,\n  } = isObj(cover) ? cover : {};\n\n  /** 是否已经打开封面选项 */\n  const enabledCover = cover != null && cover !== false && coverNode !== false;\n\n  /** 封面即根元素 */\n  const coverIsRoot = enabledCover && (cover === true || coverNode === true || coverNode == null);\n\n  /** 列表 */\n  const list = new TabList();\n\n  /** 入口们 */\n  const entries = [].concat(entry).filter(o => o != null)\n    .map(ele => isObj(ele) ? ele : { node: ele })\n    .map(entry => ({\n      ...entry,\n      delay: entry.delay ?? delayToFocus,\n      type: entry.type === undefined ? [entry.key == null ? '' : \"keydown\", entry.node == null ? '' : \"click\"].filter(t => t != '') : [].concat(entry.type),\n      onExit: entry.onExit === true ? entry.on : entry.onExit,\n    }))\n    .reduce(nodesReducer, []);\n  /** 是否是空入口 */\n  const hasNoEntry = entries.length === 0;\n  /** 带切换的入口 */\n  const toggles = new Set(entries.map(e => isFun(e.onExit) ? e.node : null).filter(n => n != null).map(n => element(n)));\n\n  /** 默认入口 */\n  let _trigger = element(trigger || entries[0]?.node);\n\n  /** 退出封面，封面的出口们 */\n  const exitsCover = [].concat(exitCover).filter(e => e != null)\n    .map(e => isObj(e) ? e : { key: e })\n    .map(e => ({\n      ...e,\n      target: e.target ?? _trigger,\n    }));\n\n  /** 是否使用默认的离开封面方法，也即 tab 和 shift-tab */\n  const isDefaultExitCover = enabledCover && exitsCover.length === 0;\n\n  /** 禁用左上角 esc 出口 */\n  const disabledEsc = onEscape === false;\n\n  const {\n    key: isNext,\n    on: onNext,\n  } = isObj(next) ? next : { key: next };\n\n  const {\n    key: isPrev,\n    on: onPrev,\n  } = isObj(prev) ? prev : { key: prev };\n\n  /** 取消循环则设置头和尾焦点 */\n  const isClamp = !(loop ?? true);\n\n  // 自定义前进或后退焦点函数，则设置 sequence 为 true\n  const enabledTabSequence = !!(isNext || isPrev || sequence);\n\n  /** 活动元素在列表中的编号，打开 sequence 生效 */\n  let activeIndex = initialActive ?? -1;\n  let prevActive = -1;\n\n  /** 是否已添加监听事件 */\n  const listListeners = new ListenersCache();\n\n  let trappedList = false;\n  let trappedCover = false;\n\n  /** 是否已添加入口的监听事件 */\n  const entryListeners = new ListenersCache();\n\n  /** 按键转发 */\n  const keyForwards = new KeyForwardCache();\n\n  if (!manual) { // 如果不是手动添加事件，则注册入口、列表相关（封面、列表、出口）的事件\n    // 入口点击事件\n    addEntryListeners();\n\n    // 如果有入口不需要延迟，则立即加载列表的监听事件\n    const hasImmediateEntry = (hasNoEntry ? [{}] : entries).some(({ delay }) => !delay);\n\n    if (hasImmediateEntry) {\n\n      const {\n        rootNode: _rootNode,\n        subNodes: _subNodes, head, tail,\n        coverNode: _coverNode,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(_subNodes);\n\n      loadListRelatedListeners(_rootNode, list.data, head, tail, _coverNode);\n    }\n  }\n\n  const Return = {\n    /** 调用形式的入口 */\n    enter(entry) {\n      _trigger = _trigger || getActiveElement();\n\n      if (entry) {\n        const { on, target, delay } = entry;\n        return entryHandler({ fromInvoke: true }, on, target, delay);\n      } else {\n        for (const entry of entries) {\n          const { on, type, node, target, delay } = entry;\n          const invokeType = \"invoke\";\n\n          if (type?.some(type => type == null || type === false || type === invokeType) || node == null) {\n            return entryHandler({ fromInvoke: true }, on, target, delay);\n          }\n        }\n        return entryHandler({ fromInvoke: true });\n      }\n    },\n    /** 调用形式的出口 */\n    exit(tempExit) {\n\n      const {\n        subNodes: _list,\n        coverNode: cover,\n        rootNode: root,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n      if (tempExit) {\n        const { on, target: originTarget } = tempExit;\n        const target = element(originTarget);\n        return toExit(target, on);\n      } else {\n        const exits = getExits(exit, onEscape, enabledCover, cover, _trigger);\n        for (const exit of exits) {\n          const { on, type, target } = exit;\n          const invokeType = \"invoke\";\n  \n          if (type?.some(type => type == null || type === false || type === invokeType)) {\n            return toExit(target, on);\n          }\n        }\n      }\n\n      function toExit(target, on) {\n\n        if (list.isEmpty()) list.update(_list);\n\n        return exitHandler({ fromInvoke: true }, on, target, false, cover, list.data, root);\n      }\n    },\n    /** 移除所有的监听事件 */\n    removeListeners() {\n      listListeners.removeListeners();\n      entryListeners.removeListeners();\n    },\n    /** 移除列表相关的事件 */\n    removeListRelatedListeners() {\n      listListeners.removeListeners();\n    },\n    /** 移除入口事件 */\n    removeEntryListeners() {\n      entryListeners.removeListeners();\n    },\n    /** 添加入口的监听事件 */\n    addEntryListeners() {\n      addEntryListeners();\n    },\n    /** 添加列表相关（封面、列表、出口）的监听事件 */\n    addListRelatedListeners() {\n\n      const {\n        rootNode: _rootNode,\n        subNodes: _subNodes,\n        coverNode: _coverNode,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      if (list.isEmpty()) list.update(_subNodes);\n\n      loadListRelatedListeners(_rootNode, list.data, list.head, list.tail, _coverNode);\n    },\n    /** 添加转发 */\n    addForward(id, forward) {\n      let opts = null;\n      if (isFun(forward)) {\n        const {\n          rootNode: root,\n          subNodes: list, head, tail,\n          coverNode: cover,\n        } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n        opts = forward({ root, list, head, tail, cover, curI: activeIndex, prevI: prevActive });\n      }\n      else opts = forward;\n\n      const { node: origin_node, on, key, target: origin_target } = opts;\n      const node = element(origin_node);\n      const target = element(origin_target);\n      keyForwards.push(id, node, e => {\n        if (key?.(e, activeIndex)) {\n          e.preventDefault();\n          on?.();\n          tickFocus(target);\n        }\n      });\n    },\n    /** 移除转发 */\n    removeForward(id) {\n      keyForwards.remove(id);\n    },\n    /** 更新列表 */\n    updateList(newList) {\n      const _newList = newList.map(item => element(item)).filter(item => item != null);\n      list.update(_newList);\n    },\n    /** 当前聚焦的列表单项序号 */\n    i(newI) {\n      if (list.has(newI) && trappedList) {\n        prevActive = activeIndex;\n        activeIndex = newI;\n        onMove?.({ e: { fromI: true }, prev: list.data[prevActive], cur: list.data[activeIndex], prevI: prevActive, curI: activeIndex });\n        focus(subNodes[activeIndex]);\n        return newI;\n      }\n      else return activeIndex;\n    },\n  };\n\n  return Return;\n\n  /** 入口 handler */\n  async function entryHandler(e, onEnter, target, delay) {\n\n    // 如果已经在列表或者封面，则不再触发入口；出口不需要该操作，因为不存在从出口退出到出口的子元素的情况，相反，存在入口进入到入口子元素的情况。\n    if (trappedCover || trappedList) return;\n\n    await onEnter?.(e);\n\n    const isImmediate = !delay;\n    if (isImmediate) findNodesToLoadListenersAndFocus();\n    else delayToProcess(delay, findNodesToLoadListenersAndFocus);\n\n    /** 寻找节点，加载事件监听器，聚焦 subNodes 或 coverNode */\n    function findNodesToLoadListenersAndFocus() {\n      const {\n        rootNode: _rootNode,\n        subNodes: _subNodes, head, tail,\n        coverNode: _coverNode,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(_subNodes);\n\n      if (!manual)\n        loadListRelatedListeners(_rootNode, list.data, head, tail, _coverNode);\n      if (target !== false)\n        focusTarget(_coverNode, _subNodes, _rootNode);\n    }\n    \n    function focusTarget(cover, list, rootNode) {\n      const gotTarget = getTarget(target, cover, list, rootNode, enabledCover, activeIndex, list[activeIndex === -1 ? 0 : activeIndex], e);\n      const targetIdx = list.indexOf(gotTarget);\n      if (targetIdx > -1) {\n        prevActive = activeIndex;\n        activeIndex = targetIdx; // 只有在聚焦列表元素时才设置，否则会破坏原有 activeIndex\n        onMove?.({ e, prev: list[prevActive], cur: gotTarget, prevI: prevActive, curI: activeIndex });\n        trappedList = true;\n      }\n      if (enabledCover && (gotTarget === cover || targetIdx > -1)) trappedCover = true;\n      tickFocus(gotTarget);\n    }\n  }\n\n  /** 出口 handler */\n  function exitHandler(e, on, target, delay, cover, list, root, ef) {\n\n    if (!trappedList || \n      !(isFun(ef) ? ef({ e, prev: list[prevActive], cur: list[activeIndex], prevI: prevActive, curI: activeIndex }) : true))\n      return false;\n\n    trappedList = false;\n\n    e.preventDefault?.(); // 阻止默认行为，例如 tab 到下一个元素，例如 entry button 触发 click 事件\n\n    const gotTarget = getTarget(target, cover, list, root, enabledCover, activeIndex, _trigger, e);\n\n    if (gotTarget) return exitListWithTarget();\n    else return exitListWithoutTarget();\n\n    /** 退出列表，有 target */\n    async function exitListWithTarget() {\n\n      await on?.(e);\n\n      delay = delay ?? delayToBlur;\n      const isImmediate = await delayToProcess(delay, focusThenRemoveListeners);\n      if (isImmediate) focusThenRemoveListeners();\n\n      function focusThenRemoveListeners() {\n        focus(gotTarget);\n        onMove?.({ e, prev: list[activeIndex], cur: gotTarget, prevI: activeIndex, curI: -1 });\n        if (!manual) {\n          if (gotTarget !== cover)\n            removeListRelatedListeners();\n          addEntryListeners();\n        }\n      }\n    }\n\n    /** 退出列表，无 target */\n    async function exitListWithoutTarget() {\n\n      if (gotTarget === false) { // 如果显式设为 false，则直接退出，不聚焦，会在一个列表退出另一个列表移动的场景使用\n        await on?.(e);\n        onMove?.({ e, prev: list[activeIndex], cur: null, prevI: activeIndex, curI: -1 });\n        if (!manual) {\n          removeListRelatedListeners();\n          addEntryListeners();\n        }\n        return ;\n      }\n      if (enabledCover) {\n        await on?.(e);\n        onMove?.({ e, prev: list[activeIndex], cur: null, prevI: activeIndex, curI: -1 });\n        focus(cover);\n      } else {\n        await on?.(e);\n\n        delay = delay ?? delayToBlur;\n        const isImmediate = await delayToProcess(delay, focusThenRemoveListeners);\n        if (isImmediate) focusThenRemoveListeners();\n\n        function focusThenRemoveListeners() {\n          _trigger && focus(_trigger);\n          onMove?.({ e, prev: list[activeIndex], cur: null, prevI: activeIndex, curI: -1 });\n          if (!manual) {\n            removeListRelatedListeners();\n            addEntryListeners();\n          }\n        }\n      }\n    }\n  }\n\n  /** 生成事件行为，添加事件监听器 */\n  function loadListRelatedListeners(_rootNode, _subNodes, _head, _tail, _coverNode) {\n\n    if (!listListeners.isEmpty) return ;\n\n    if (_rootNode == null)\n      throw new Error(`没有找到元素 ${rootNode}，您可以尝试 delayToFocus 选项，等待元素 ${rootNode} 渲染完毕后进行聚焦。`);\n    if (_head == null || _tail == null)\n      throw new Error(\"至少需要包含两个可以聚焦的元素，如果元素需要等待渲染，您可以尝试 delayToFocus 选项。\");\n\n    const useActiveIndex = () => [activeIndex, newVal => activeIndex = newVal];\n    const usePrevActive = () => [, prev => prevActive = prev];\n\n    const isTrappedList = () => hasNoEntry ? true : trappedList;\n\n    // 在焦点循环中触发聚焦\n    const keyListMoveHandler = enabledTabSequence ?\n      focusNextListItemBySequence(_subNodes, useActiveIndex, usePrevActive, isClamp, isNext, isPrev, onNext, onPrev, _coverNode, onMove, isTrappedList) :\n      focusNextListItemByRange(_subNodes, isClamp, onNext, onPrev, _rootNode, _coverNode, isTrappedList);\n\n    /** 出口们，列表的出口们，subNodes 的出口们 */\n    const exits = getExits(exit, onEscape, enabledCover, _coverNode, _trigger);\n    const {\n      keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n      clickExits_wild, focusExits_wild,\n      outListExits,\n    } = splitExits(exits, _rootNode);\n\n    /** 非跟节点内的，是跟节点之外的出口 */\n    const clickListExitHandlers_wild = clickExits_wild.map(exit => [element(exit?.node), clickListExitHandler_wild(exit)]);\n    const focusListExitHandlers_wild = focusExits_wild.map(exit => [element(exit?.node), focusListExitHandler_wild(exit)]);\n\n    // 添加除 trigger 以外其它和焦点相关的事件监听器\n    addListRelatedListeners();\n\n    let isMouseDown = false;\n    /** 标记是否从封面进入列表，用于防止纠正列表焦点的误判，用于野生封面 */\n    let isEnterFromCover = false;\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |          LIST HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    function focusTrapListHandler(e) {\n\n      const focusTarget = e.target;\n\n      // 进入封面（封面在列表中）\n      if (enabledCover && focusTarget === _coverNode) {\n        trappedCover = true;\n        return ;\n      }\n\n      // 纠正进入封面，从外部进入列表，如果没有通过封面，则重新聚焦封面\n      if (enabledCover && isMouseDown === false && trappedCover === false) {\n        tickFocus(_coverNode);\n        return ;\n      }\n\n      // 纠正外部聚焦进来的焦点\n      if (correctionTarget !== false && enabledTabSequence && trappedList === false && isMouseDown === false) // 如果是内部的聚焦，无需纠正，防止嵌套情况的循环问题\n      {\n        const originGotCorrectionTarget = correctionTarget?.({ list: _subNodes, cover: _coverNode, root: _rootNode, last: _subNodes[activeIndex], lastI: activeIndex }) ?? (activeIndex === -1 ? _subNodes[0] : _subNodes[activeIndex]);\n        const gotCorrectionTarget = element(originGotCorrectionTarget);\n        const targetIndex = _subNodes.findIndex(item => item === gotCorrectionTarget);\n        if (targetIndex > -1) {\n          prevActive = activeIndex;\n          activeIndex = targetIndex;\n          onMove?.({ e, prev: _subNodes[prevActive], cur: _subNodes[activeIndex], prevI: prevActive, curI: activeIndex });\n        }\n        tickFocus(gotCorrectionTarget);\n      }\n\n      trappedList = true;\n    }\n\n    function blurTrapListHandler(e) {\n      // 用于保护可切换的入口能够被触发\n      if (toggles.has(e.relatedTarget)) return;\n\n      setTimeout(() => { // 延迟后获取下一次聚焦的元素，否则当前聚焦元素是 body\n\n        const active = getActiveElement();\n        const isOutRootNode = !_rootNode.contains(active);\n        const isActiveCover = active === _coverNode;\n\n        // 从封面退出\n        if (e.target === _coverNode && isOutRootNode) {\n          trappedCover = false; // 退出封面\n          return;\n        }\n\n        let isOutList = null;\n        if (isActiveCover || isOutRootNode) isOutList = outListExitHandler(e);\n        if (isOutList === false) return; // 不符合退出列表的条件\n\n        if (isActiveCover) { // 聚焦在封面\n          trappedList = false;\n        } else if (isOutRootNode) { // 聚焦在非封面、非列表的区域\n          trappedList = false;\n          trappedCover = false;\n        }\n      });\n    }\n\n    function mousedownListItemHandler(e) {\n      isMouseDown = true;\n      setTimeout(() => {\n        isMouseDown = false; // mousedown 没有出口，只能使用定时器，isMouseDown 主要在两个 focus 事件中使用，当触发 focus 时，此定时器还未执行，以此保证正确性\n      });\n\n      let targetItem;\n      if (!enabledTabSequence ||\n        (enabledTabSequence && (targetItem = _subNodes.find(item => item.contains(e.target))))) {\n        trappedList = true;\n        if (enabledCover) trappedCover = true;\n        if (allowSafariToFocusAfterMousedown && targetItem && window.safari !== undefined) { // 兼容 Safari（桌面端），具体问题查看：https://github.com/wswmsword/web-experiences/tree/main/browser/safari-button-focus\n          focus(targetItem); // Safari 不会聚焦按钮元素，这里强制使用 api 聚焦\n          e.preventDefault(); // 阻止默认行为可以避免 targetItem 失焦\n        }\n      }\n    }\n\n    /** 点击聚焦列表某一单项 */\n    function clickListItemHandler(e) {\n      const target = e.target;\n      const targetIndex = _subNodes.findIndex(e => e.contains(target));\n      if (targetIndex > -1) {\n        prevActive = activeIndex;\n        activeIndex = targetIndex;\n\n        onClick?.({ e, prev: _subNodes[prevActive], cur: _subNodes[activeIndex], prevI: prevActive, curI: activeIndex });\n        if (prevActive !== activeIndex || trappedList === false)\n          onMove?.({ e, prev: _subNodes[prevActive], cur: _subNodes[activeIndex], prevI: prevActive, curI: activeIndex });\n      }\n    }\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |         COVER HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    function focusTrapCoverHandler() { trappedCover = true; } // 捕获点击封面的情况\n\n    function blurTrapCoverHandler() { // 捕获点击空白区域的情况\n      if (isEnterFromCover) { // 用于防止纠正列表焦点的误判，如果是进入列表，则 trappedCover 还应是 true\n        isEnterFromCover = false;\n        return;\n      }\n      trappedCover = false;\n    }\n\n    /** 封面的键盘事件响应 */\n    function keyCoverHandler(e) {\n      if (e.target !== _coverNode) return;\n      if (!(trappedCover && !trappedList)) return; // 继续执行，必须满足焦点在封面上，且不在列表中\n\n      // 入口\n      if((coverEnterKey ?? isEnterEvent)(e) && !trappedList) {\n        e.preventDefault();\n        isEnterFromCover = true;\n        trappedList = true\n        onEnterCover?.(e);\n        activeIndex = activeIndex === -1 ? 0 : activeIndex;\n        focus(_subNodes[activeIndex]);\n        onMove?.({ e, prev: null, cur: _subNodes[activeIndex], prevI: null, curI: activeIndex });\n        return;\n      }\n\n      // 出口\n      for (let exit of exitsCover) {\n        const { key, on, target: origin } = exit;\n        const target = element(origin);\n        if (key?.(e, activeIndex)) {\n          exitCoverHandler(e, on, target);\n          return;\n        }\n      }\n\n      // 默认出口\n      if (isDefaultExitCover &&\n        isTabForward(e)) { // 虽然也是离开列表，但是这里不移除监听事件，因为移除后就不能再次进入封面\n        focus(_tail);\n        return;\n      }\n\n      /** 退出封面焦点的行为 */\n      function exitCoverHandler(e, onExit, target) {\n        onExit?.(e);\n        target && focus(target);\n        removeListRelatedListeners();\n      }\n    }\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |            + START +            |\n     |          EXIT HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    function outListExitHandler(e) {\n      for (const exit of outListExits) {\n        const { on, target: origin_target, delay } = exit;\n        const target = element(origin_target);\n        return exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n      }\n    }\n\n    function clickExitHandler(e, exit) {\n      const { node: origin_node, on, target: origin_target, delay } = exit;\n      const node = element(origin_node);\n      const target = element(origin_target);\n\n      if (\n        (node != null && !node.contains(e.target)) ||\n        node == null) return false;\n      exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n      return true;\n    }\n\n    /** 点击列表的出口 */\n    function clickListExitHandler(e) {\n      for (const exit of clickExits) {\n        const isOK = clickExitHandler(e, exit);\n        if (isOK) break;\n      }\n    }\n\n    function focusExitHandler(e, exit) {\n      const { node: origin_node, on, target: origin_target, delay } = exit;\n      const node = element(origin_node);\n      const target = element(origin_target);\n\n      if (\n        (node != null && e.target !== node) ||\n        node == null) return false;\n      exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n      return true;\n    }\n\n    /** 聚焦列表一个单项而退出 */\n    function focusListExitHandler(e) {\n\n      for (const exit of focusExits) {\n        const isOK = focusExitHandler(e, exit)\n        if (isOK) break;\n      }\n    }\n\n    function keyExitHandler(e, exit) {\n      let { key, node: origin_node, target, on, delay } = exit;\n      const node = element(origin_node);\n      if (node != null && e.target !== node) return false;\n      if (key?.(e, activeIndex)) {\n        exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n        return true;\n      }\n    }\n\n    /** 触发键盘退出列表，退出列表焦点 */\n    function keyListExitHandler(e) {\n      if (e.target === _coverNode) return; // 被封面触发直接返回\n\n      if (disabledEsc && isEscapeEvent(e)) return;\n\n      for (const exit of keyExits) {\n        const isOK = keyExitHandler(e, exit);\n        if (isOK) break;\n      }\n    }\n\n    function clickListExitHandler_wild(exit) {\n      return function(e) { clickExitHandler(e, exit); }\n    }\n\n    function focusListExitHandler_wild(exit) {\n      return function(e) { focusExitHandler(e, exit); }\n    }\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |             - END -             |\n     |          EXIT HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    /** 添加焦点需要的事件监听器 */\n    function addListRelatedListeners() {\n\n      listListeners.push(_rootNode, \"focusin\", focusTrapListHandler);\n\n      listListeners.push(_rootNode, \"focusout\", blurTrapListHandler);\n\n      if (!_rootNode.contains(_coverNode) && _coverNode != null) {\n\n        listListeners.push(_coverNode, \"focus\", focusTrapCoverHandler);\n\n        listListeners.push(_coverNode, \"blur\", blurTrapCoverHandler);\n      }\n\n      listListeners.push(_rootNode, \"keydown\", e => {\n        // 列表中移动，监听移动的键盘事件，例如 tab 或其它自定义组合键\n        keyListMoveHandler(e);\n        // 列表键盘出口\n        if (hasKeyExits) keyListExitHandler(e);\n      });\n\n      if (enabledTabSequence) {\n        // 点击聚焦列表单项，只在手动列表时监听点击，因为自动模式不需要记录 activeIndex\n        listListeners.push(_rootNode, \"click\", clickListItemHandler);\n      }\n\n      // 由于 click 事件在 focus 之后，这里用来判断是否通过点击进入列表，用于纠错未知进入列表的焦点定位\n      listListeners.push(_rootNode, \"mousedown\", mousedownListItemHandler);\n\n      if (hasClickExits) {\n        // 列表点击出口\n        listListeners.push(_rootNode, \"click\", clickListExitHandler);\n      }\n\n      if (hasFocusExits) {\n        // 列表聚焦出口\n        listListeners.push(_rootNode, \"focusin\", focusListExitHandler);\n      }\n\n      // 非列表内的出口\n      focusListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"focus\", handler);\n      });\n      clickListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"click\", handler);\n      });\n\n      if (_coverNode != null) {\n        // 封面的事件\n        listListeners.push(_coverNode, \"keydown\", keyCoverHandler);\n      }\n\n      // flush\n      listListeners.addListeners();\n    };\n  }\n\n  /** 添加入口事件 */\n  function addEntryListeners() {\n\n    if (!entryListeners.isEmpty) return;\n\n    for (let entry of entries) {\n      const { node: origin, on, key, type, target, delay, onExit } = entry;\n      const ef = entry.if;\n      const types = [].concat(type);\n      const allTypes = [\"keydown\", \"focus\", \"click\"];\n      const node = element(origin);\n\n      types.forEach(type => {\n        if (node && allTypes.includes(type)) {\n          const handler = type === \"keydown\"\n            ? entryKeyHandler\n            : entryNotKeyHandler;\n          entryListeners.push(node, type, handler); // 保存事件信息\n        }\n      });\n\n      function entryKeyHandler(e) {\n        if (key?.(e, activeIndex) && \n          (isFun(ef) ? ef({ e, prev: list.data[prevActive], cur: list.data[activeIndex], prevI: prevActive, curI: activeIndex }) : true))\n          toggleEntryAndExit(e, true)\n      }\n    \n      function entryNotKeyHandler(e) {\n        if (!(isFun(ef) ? ef({ e, prev: list.data[prevActive], cur: list.data[activeIndex], prevI: prevActive, curI: activeIndex }) : true))\n          return;\n        toggleEntryAndExit(e)\n      }\n\n      function toggleEntryAndExit(e, isKey) {\n        if (trappedList) {\n          if (isFun(onExit)) {\n            const {\n              subNodes: list,\n              coverNode: cover,\n              rootNode: root,\n            } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n            isKey && e.preventDefault();\n            exitHandler(e, onExit, target, false, cover, list, root);\n          }\n        }\n        else {\n          isKey && e.preventDefault();\n          entryHandler(e, on, target, delay);\n          if (removeListenersEachEnter && !manual)\n            entryListeners.removeListeners();\n        }\n      }\n    }\n\n    // flush\n    entryListeners.addListeners();\n  }\n\n  /** 移除监听事件 */\n  function removeListRelatedListeners() {\n\n    // 如果是默认的，没有定义出口的封面，则不移除事件\n    if (isDefaultExitCover) return;\n\n    if (removeListenersEachExit && !manual) {\n      listListeners.removeListeners();\n    }\n  }\n};\n\nexport default focusNoJutsu;"],"names":["objToStr","obj","Object","prototype","toString","call","isObj","isFun","fun","getActiveElement","document","activeElement","element","e","str","querySelector","isEnterEvent","key","keyCode","isEscapeEvent","isTabEvent","isTabForward","shiftKey","isTabBackward","focus","node","tagName","toLowerCase","select","tickFocus","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","Promise","resolve","setTimeout","stop","_x","apply","this","arguments","getKeyNodes","root","list","cover","coverIsRoot","_element","_list","map","item","filter","head","tail","slice","_root","x","y","contains","range","Range","setStartBefore","setEndAfter","collapsed","commonAncestorContainer","findLowestCommonAncestorNode","rootNode","subNodes","coverNode","nodesReducer","acc","cur","nodes","Array","isArray","n","_extends","concat","splitExits","exits","_exits$reduce","reduce","click","click_wild","focus_wild","outList","includeType","type","_e$type","includes","fill","keyExits","clickExits","focusExits","clickExits_wild","focusExits_wild","outListExits","hasClickExits","length","hasFocusExits","hasKeyExits","getExits","exit","onEscape","enabledCover","trigger","_tempExits$0$on","_tempExits$","tempExits","o","ele","undefined","t","_onEscape","on","target","getDelayType","delay","isFunctionDelay","delayRes","promiseDelay","callbackDelay","commonDelay","delayToProcess","_ref2","_callee2","processor","_ref3","_context2","_x2","_x3","getTarget","activeIndex","defaultTarget","gotTarget","last","lastI","ListenersCache","cache","isEmpty","_proto","push","handler","clean","addListeners","forEach","l","_l$node","addEventListener","removeListeners","_l$node2","removeEventListener","KeyForwardCache","Map","_proto2","has","id","set","remove","_this","get","TabList","data","_proto3","update","splice","at","i","_ref4","_entries$","offset","options","Error","sequence","loop","entry","onClick","onMove","initialActive","correctionTarget","delayToFocus","delayToBlur","_options$removeListen","removeListenersEachExit","removeListenersEachEnter","manual","_options$allowSafariT","allowSafariToFocusAfterMousedown","demo","_ref5","coverEnterKey","enterKey","onEnterCover","onEnter","exitCover","entries","_entry$delay","onExit","hasNoEntry","toggles","Set","_trigger","exitsCover","_e$target","isDefaultExitCover","disabledEsc","_ref6","isNext","onNext","_ref7","isPrev","onPrev","isClamp","enabledTabSequence","prevActive","listListeners","trappedList","trappedCover","entryListeners","keyForwards","addEntryListeners","some","_ref8","_getKeyNodes","_rootNode","_subNodes","_coverNode","loadListRelatedListeners","Return","enter","entryHandler","fromInvoke","_step","_loop","value","v","_iterator","_createForOfIteratorHelperLoose","done","_ret","tempExit","_getKeyNodes2","originTarget","toExit","_step2","_loop2","_iterator2","_ret2","exitHandler","removeListRelatedListeners","removeEntryListeners","addListRelatedListeners","_getKeyNodes3","addForward","forward","opts","_getKeyNodes4","curI","prevI","_opts","origin_node","origin_target","preventDefault","removeForward","updateList","newList","_newList","newI","fromI","_x4","_x5","_x6","_x7","_entryHandler","_callee5","findNodesToLoadListenersAndFocus","focusTarget","_context5","targetIdx","indexOf","_getKeyNodes6","ef","_e$preventDefault","_exitListWithTarget","exitListWithTarget","_exitListWithoutTarget","exitListWithoutTarget","_callee3","_delay","focusThenRemoveListeners","_context3","sent","_callee4","_delay2","_context4","_head","_tail","isTrappedList","keyListMoveHandler","useActiveIndex","usePrevActive","_useActiveIndex","index_","setIndex","setPrev","index","Math","max","itemsLen","incresedI","nextI","min","decresedI","focusNextListItemBySequence","newVal","current","focusNextListItemByRange","_splitExits","clickListExitHandlers_wild","clickListExitHandler_wild","focusListExitHandlers_wild","focusListExitHandler_wild","focusTrapListHandler","blurTrapListHandler","focusTrapCoverHandler","blurTrapCoverHandler","_step7","_iterator7","keyExitHandler","keyListExitHandler","clickListItemHandler","mousedownListItemHandler","clickListExitHandler","focusListExitHandler","_ref9","_ref10","keyCoverHandler","isMouseDown","isEnterFromCover","_correctionTarget","originGotCorrectionTarget","gotCorrectionTarget","targetIndex","findIndex","relatedTarget","active","isOutRootNode","isActiveCover","isOutList","_step4","_iterator4","outListExitHandler","targetItem","find","window","safari","_step3","_iterator3","origin","exitCoverHandler","clickExitHandler","_step5","_iterator5","focusExitHandler","_step6","_iterator6","_step8","_loop3","types","allTypes","entryKeyHandler","toggleEntryAndExit","entryNotKeyHandler","isKey","_getKeyNodes5","_iterator8"],"mappings":"olQACO,IAAMA,EAAW,SAAAC,GAAG,OAAIC,OAAOC,UAAUC,SAASC,KAAKJ,EAAI,EAGrDK,EAAQ,SAAAL,GAAG,MAAsB,oBAAlBD,EAASC,EAA0B,EAGlDM,EAAQ,SAAAC,GAAG,MAAsB,sBAAlBR,EAASQ,EAA4B,EAGpDC,EAAmB,WAAH,OAASC,SAASC,aAAa,EAM/CC,EAAU,SAAAC,GAAC,MAAiB,iBAANA,GAHNC,EAGqCD,EAH9BH,SAASK,cAAcD,IAGYD,EAH1C,IAAAC,CAG2C,EAiB3DE,EAAe,SAASH,GACnC,MAAiB,UAAVA,EAAEI,KAAiC,KAAdJ,EAAEK,OAChC,EAGaC,EAAgB,SAAUN,GACrC,MAAiB,WAAVA,EAAEI,KAA8B,QAAVJ,EAAEI,KAA+B,KAAdJ,EAAEK,OACpD,EAGaE,EAAa,SAASP,GACjC,MAAiB,QAAVA,EAAEI,KAA+B,IAAdJ,EAAEK,OAC9B,EAGaG,EAAe,SAASR,GACnC,OAAOO,EAAWP,KAAOA,EAAES,QAC7B,EAGaC,EAAgB,SAASV,GACpC,OAAOO,EAAWP,IAAMA,EAAES,QAC5B,ECpDME,EAAQ,SAASX,GDqBU,IAASY,ECjBxC,OAHAZ,EAAEW,SDoBsCC,ECnBlBZ,GDqBfa,SAC0B,UAA/BD,EAAKC,QAAQC,eACU,mBAAhBF,EAAKG,QCtBZf,EAAEe,UACG,CACT,EAGMC,EAAS,WAAA,IAAAC,EAAAC,EAAAC,IAAAC,MAAG,SAAAC,EAAerB,GAAC,OAAAmB,IAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAG,OAAA,SACzB,IAAIC,SAAQ,SAAAC,GACR,MAAL5B,EDON6B,YCPsB,WAAA,OAAMD,EAAQ5B,GAAKW,EAAMX,GAAI,GDOpC,GCNR4B,EAAQjB,EAAMX,GACpB,KAAC,KAAA,EAAA,IAAA,MAAA,OAAAuB,EAAAO,OAAA,GAAAT,EACH,KAAA,OALKL,SAASe,GAAA,OAAAd,EAAAe,MAAAC,KAAAC,UAAA,CAAA,CAAA,GAyETC,EAAc,SAASC,EAAMC,EAAMC,EAAOC,GAAa,IAAAC,EACrDC,EAAQJ,EAAKK,KAAI,SAAAC,GAAI,OAAI5C,EAAQ4C,EAAK,IAAEC,QAAO,SAAAD,GAAI,OAAY,MAARA,KACvDE,EAAOJ,EAAM,GACbK,EAAOL,EAAMM,OAAO,GAAG,GACvBC,EAAqB,QAAhBR,EAAGzC,EAAQqC,UAAK,IAAAI,EAAAA,ED9Be,SAASS,EAAGC,GACtD,GAAS,MAALD,GAAkB,MAALC,EAAW,OAAO,KACnC,GAAID,EAAEE,SAASD,GAAI,OAAOD,EAC1B,GAAIC,EAAEC,SAASF,GAAI,OAAOC,EAE1B,IAAME,EAAQ,IAAIC,MAOlB,OANAD,EAAME,eAAeL,GACrBG,EAAMG,YAAYL,GACdE,EAAMI,YACPJ,EAAME,eAAeJ,GACrBE,EAAMG,YAAYN,IAEdG,EAAMK,uBACf,CCiBiCC,CAA6Bb,EAAMC,GAGlE,MAAO,CACLa,SAAUX,EACVY,SAAUnB,EACVI,KAAAA,EACAC,KAAAA,EACAe,UAPatB,EAAcS,EAAQjD,EAAQuC,GAS/C,EAGMwB,EAAe,SAASC,EAAKC,GACjC,IACMC,EADaC,MAAMC,QAAQH,EAAIpD,MACVoD,EAAIpD,KAAK8B,KAAI,SAAA0B,GAAC,OAAAC,KACpCL,EAAG,CACNpD,KAAMwD,GACN,IAAIJ,EACN,OAAOD,EAAIO,OAAOL,EACpB,EAGMM,EAAa,SAASC,EAAOpC,GAEjC,IAEAqC,EAA2FD,EAAME,QAAO,SAACX,EAAK/D,GAC5G,IAHkBY,EAGbR,EAAsD2D,EAAG,GAApDY,EAAiDZ,EAAG,GAA7CpD,EAA0CoD,EAAG,GAAtCa,EAAmCb,EAAG,GAA1Bc,EAAuBd,EAAG,GAAde,EAAWf,EAAG,GACxDgB,EAAc,SAAAC,GAAI,IAAAC,EAAA,OAAU,QAAVA,EAAIjF,EAAEgF,YAAI,IAAAC,OAAA,EAANA,EAAQC,SAASF,EAAK,EAWlD,OAfmC,OAAjBpE,EAKFZ,EAAEY,OALyBwB,EAAKe,SAASpD,EAAQa,KAAmB,MAARA,GAMtEmE,EAAY,aAAY3E,EAAMA,EAAIkE,OAAOtE,IACzC+E,EAAY,WAAUJ,EAAQA,EAAML,OAAOtE,IAC3C+E,EAAY,WAAUpE,EAAQA,EAAM2D,OAAOtE,IAC3C+E,EAAY,aAAYD,EAAUA,EAAQR,OAAOtE,MAEjD+E,EAAY,WAAUH,EAAaA,EAAWN,OAAOtE,IACrD+E,EAAY,WAAUF,EAAaA,EAAWP,OAAOtE,IACrD+E,EAAY,aAAYD,EAAUA,EAAQR,OAAOtE,KAEhD,CAACI,EAAKuE,EAAOhE,EAAOiE,EAAYC,EAAYC,EACpD,GAAE,IAAIZ,MAAM,GAAGiB,KAAK,KAddC,EAAQX,EAAA,GAAEY,EAAUZ,EAAA,GAAEa,EAAUb,EAAA,GAAEc,EAAed,EAAA,GAAEe,EAAef,EAAA,GAAEgB,EAAYhB,EAAA,GAoBvF,MAAO,CACLW,SAAAA,EAAUC,WAAAA,EAAYC,WAAAA,EAAYI,cALdL,EAAWM,OAAS,EAKSC,cAJ7BN,EAAWK,OAAS,EAIwBE,YAH9CT,EAASO,OAAS,EAIpCJ,gBAAAA,EAAiBC,gBAAAA,EACjBC,aAAAA,EAEJ,EAGMK,EAAW,SAASC,EAAMC,EAAUC,EAAc3D,EAAO4D,GAAS,IAAAC,EAAAC,EAElEC,EAAY,GAAG/B,OAAOyB,GAAMnD,QAAO,SAAA0D,GAAC,OAAS,MAALA,CAAS,IAClD5D,KAAI,SAAA6D,GAAG,OAAI9G,EAAM8G,GAAOA,EAAM,CAAE3F,KAAM2F,EAAK,IAC3C7D,KAAI,SAAA1C,GAAC,OAAAqE,KACDrE,EAAC,CAEJgF,UAAiBwB,IAAXxG,EAAEgF,KAAqB,CAAU,MAAThF,EAAEI,IAAc,GAAK,UAAqB,MAAVJ,EAAEY,KAAe,GAAK,SAASgC,QAAO,SAAA6D,GAAC,MAAU,KAANA,CAAQ,IAAI,GAAGnC,OAAOtE,EAAEgF,OACjI,IACDN,OAAOZ,EAAc,IACpB4C,EAAYhH,EAAMsG,GAAYA,GAAwB,IAAbA,EAAoC,QAAnBG,EAAeC,QAAfA,EAAGC,EAAU,UAAVD,IAAYA,OAAZA,EAAAA,EAAcO,UAAE,IAAAR,EAAAA,EAAK,WAAM,EAAMH,EAWlG,MAFc,CAPKtG,EAAMgH,GAAa,CACpC9F,KAAM,KACNR,IAAKE,EACLqG,GAAID,EACJE,OAAQX,EAAe3D,EAAQ4D,EAC/BlB,KAAM,CAAC,YACL,MACuBV,OAAO+B,GAAWzD,QAAO,SAAA5C,GAAC,OAAS,MAALA,IAG3D,EAGM6G,EAAe,SAASC,GAC5B,IAAMC,EAAkBrH,EAAMoH,GACxBE,EAAWD,GAAmBD,GAAM,WAAQ,IAC5CG,EAAeF,GAA0C,qBAAvB5H,EAAS6H,GAC3CE,EAAgBH,IAAoBE,EAE1C,MAAO,CACLA,aAAAA,EACAC,cAAAA,EACAC,aAJ6B,IAAVL,IAAoBG,IAAiBC,EAM5D,EAGME,EAAc,WAAA,IAAAC,EAAAnG,EAAAC,IAAAC,MAAG,SAAAkG,EAAeR,EAAOS,GAAS,IAAAC,EAAAP,EAAAC,EAAAC,EAAA,OAAAhG,IAAAG,MAAA,SAAAmG,GAAA,cAAAA,EAAAjG,KAAAiG,EAAAhG,MAAA,KAAA,EAEJ,GAFI+F,EAEGV,EAAQD,EAAaC,GAAS,CAAA,EAA7EG,EAAYO,EAAZP,aAAcC,EAAaM,EAAbN,cAAeC,EAAWK,EAAXL,aACjCF,EAAY,CAAAQ,EAAAhG,KAAA,EAAA,KAAA,CAAA,OAAAgG,EAAAhG,KAAA,EACRqF,GAAM,WAAM,IAAG,KAAA,EACrBS,IAAYE,EAAAhG,KAAA,GAAA,MAAA,KAAA,EAAA,IAELyF,EAAa,CAAAO,EAAAhG,KAAA,GAAA,KAAA,CAAEqF,EAAMS,GAAWE,EAAAhG,KAAA,GAAA,MAAA,KAAA,GAAA,IAChC0F,EAAW,CAAAM,EAAAhG,KAAA,GAAA,KAAA,CAAE8F,IAAYE,EAAAhG,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAgG,EAAA/F,OAAA,UACtB,GAAI,KAAA,GAAA,IAAA,MAAA,OAAA+F,EAAA3F,OAAA,GAAAwF,EACjB,KAAA,OAAA,SAVmBI,EAAAC,GAAA,OAAAN,EAAArF,MAAAC,KAAAC,UAAA,CAAA,CAAA,GAad0F,EAAY,SAAShB,EAAQtE,EAAOD,EAAMD,EAAM6D,EAAc4B,EAAaC,EAAe9H,GAE9F,GAAc,MAAV4G,IAA6B,IAAXA,EACpB,OAAIX,EAAqB3D,EACbwF,EAGT,GAAIpI,EAAMkH,GAAS,CACtB,IAAMmB,EAAYnB,EAAO,CAAE5G,EAAAA,EAAGqC,KAAAA,EAAMC,MAAAA,EAAOF,KAAAA,EAAM4F,KAAM3F,EAAKwF,GAAcI,MAAOJ,IACjF,OAAiB,MAAbE,IAAmC,IAAdA,EACnB9B,EAAqB3D,EACbwF,EAEPC,CACT,CAEK,OAAOhI,EAAQ6G,EACtB,EAGMsB,EAAc,WAAA,SAAAA,IAAAjG,KAClBkG,MAAQ,GAAElG,KACVmG,SAAU,CAAI,CAAA,IAAAC,EAAAH,EAAA5I,UAmBb,OAnBa+I,EACdC,KAAA,SAAK1H,EAAMoE,EAAMuD,GACftG,KAAKmG,SAAU,EACfnG,KAAKkG,MAAMG,KAAK,CACd1H,KAAAA,EACAoE,KAAAA,EACAuD,QAAAA,KAEHF,EACDG,MAAA,WACEvG,KAAKkG,MAAQ,GACblG,KAAKmG,SAAU,GAChBC,EACDI,aAAA,WACExG,KAAKkG,MAAMO,SAAQ,SAAAC,GAAC,IAAAC,EAAA,OAAU,QAAVA,EAAID,EAAE/H,YAAFgI,IAAMA,OAANA,EAAAA,EAAQC,iBAAiBF,EAAE3D,KAAM2D,EAAEJ,aAC5DF,EACDS,gBAAA,WACE7G,KAAKkG,MAAMO,SAAQ,SAAAC,GAAC,IAAAI,EAAA,OAAU,QAAVA,EAAIJ,EAAE/H,YAAFmI,IAAMA,OAANA,EAAAA,EAAQC,oBAAoBL,EAAE3D,KAAM2D,EAAEJ,YAC9DtG,KAAKuG,SACNN,CAAA,CArBiB,GAyBde,EAAe,WAAA,SAAAA,IAAAhH,KACnBkG,MAAQ,IAAIe,GAAK,CAAA,IAAAC,EAAAF,EAAA3J,UAehB,OAfgB6J,EACjBC,IAAA,SAAIC,GACF,OAAOpH,KAAKkG,MAAMiB,IAAIC,IACvBF,EACDb,KAAA,SAAKe,EAAIzI,EAAM2H,GACTtG,KAAKmH,IAAIC,KACbzI,EAAKiI,iBAAiB,UAAWN,GACjCtG,KAAKkG,MAAMmB,IAAID,EAAI,CACjBzI,KAAAA,EACA2H,QAAAA,MAEHY,EACDI,OAAA,SAAOF,GAAI,IAAAG,EAAAvH,KACG,GAAGqC,OAAO+E,GAClBX,SAAQ,SAAAW,GAAE,OAAIG,EAAKrB,MAAMsB,IAAIJ,GAAIzI,KAAKoI,oBAAoB,UAAWQ,EAAKrB,MAAMsB,IAAIJ,GAAId,aAC7FU,CAAA,CAhBkB,GAoBfS,EAAO,WAAA,SAAAA,IAAAzH,KACX0H,KAAO,GAAE1H,KACTY,KAAO,KAAIZ,KACXa,KAAO,IAAI,CAAA,IAAA8G,EAAAF,EAAApK,UAYV,OAZUsK,EACXC,OAAA,SAAOxH,GACLJ,KAAK0H,KAAKG,OAAO,EAAG7H,KAAK0H,KAAKhE,QAC9BzB,MAAM5E,UAAUgJ,KAAKtG,MAAMC,KAAK0H,KAAMtH,GACtCJ,KAAKY,KAAOR,EAAK,GACjBJ,KAAKa,KAAOT,EAAK0H,IAAI,IACtBH,EACDxB,QAAA,WACE,OAA4B,IAArBnG,KAAK0H,KAAKhE,QAClBiE,EACDR,IAAA,SAAIY,GACF,QAAS/H,KAAK0H,KAAKK,IACpBN,CAAA,CAfU,UAkBQ,WAAc,IAAAO,EAAAC,EAC3BC,EAAS,IAAKjI,UAAAyD,QAAA,OAAAa,EAAAtE,UAAA,cAAoBgC,OAClCP,EAAiB,EAAIwG,EAAMjI,GAAAA,UAAAyD,QAAV,EAAIwE,OAAM3D,EAAAtE,UAAV,EAAIiI,GACrBvG,EAAiB,EAAIuG,EAAMjI,GAAAA,UAAAyD,QAAV,EAAIwE,OAAM3D,EAAAtE,UAAV,EAAIiI,GACrBC,EAA2B,QAApBH,EAAU,EAAIE,EAAM,GAAAjI,UAAAyD,QAAV,EAAIwE,OAAM3D,EAAAtE,UAAV,EAAIiI,UAAM,IAAAF,EAAAA,EAAK,GAEtC,KAAM/F,MAAMC,QAAQP,IAAaA,EAAS+B,OAAS,GACjD,MAAM,IAAI0E,MAAM,uCAElB,IAEEC,EAuCEF,EAvCFE,SAEAC,EAqCEH,EArCFG,KAEA9I,EAmCE2I,EAnCF3I,KAEAD,EAiCE4I,EAjCF5I,KAEA0E,EA+BEkE,EA/BFlE,QAEAsE,EA6BEJ,EA7BFI,MAEAzE,EA2BEqE,EA3BFrE,KAEAC,EAyBEoE,EAzBFpE,SAEAyE,EAuBEL,EAvBFK,QAEAC,EAqBEN,EArBFM,OAEApI,EAmBE8H,EAnBF9H,MAEAqI,EAiBEP,EAjBFO,cAEAC,EAeER,EAfFQ,iBAEAC,EAaET,EAbFS,aAEAC,EAWEV,EAXFU,YAAWC,EAWTX,EATFY,wBAAAA,OAA0B,IAAHD,GAAOA,EAE9BE,EAOEb,EAPFa,yBAEAC,EAKEd,EALFc,OAAMC,EAKJf,EAHFgB,iCAAAA,OAAmC,IAAHD,GAAOA,EAGrCf,EADFiB,KAIF,IAAAC,EAMI7L,EAAM6C,GAASA,EAAQ,CAAE,EAJrBuB,EAASyH,EAAf1K,KACU2K,EAAaD,EAAvBE,SACSC,EAAYH,EAArBI,QACMC,GAASL,EAAfvF,KAIIE,GAAwB,MAAT3D,IAA2B,IAAVA,IAAiC,IAAduB,EAGnDtB,GAAc0D,MAA2B,IAAV3D,IAAgC,IAAduB,GAAmC,MAAbA,GAGvExB,GAAO,IAAIqH,EAGXkC,GAAU,GAAGtH,OAAOkG,GAAO5H,QAAO,SAAA0D,GAAC,OAAS,MAALA,CAAS,IACnD5D,KAAI,SAAA6D,GAAG,OAAI9G,EAAM8G,GAAOA,EAAM,CAAE3F,KAAM2F,EAAK,IAC3C7D,KAAI,SAAA8H,GAAK,IAAAqB,EAAA,OAAAxH,KACLmG,EAAK,CACR1D,MAAkB,QAAb+E,EAAErB,EAAM1D,aAAK,IAAA+E,EAAAA,EAAIhB,EACtB7F,UAAqBwB,IAAfgE,EAAMxF,KAAqB,CAAc,MAAbwF,EAAMpK,IAAc,GAAK,UAAyB,MAAdoK,EAAM5J,KAAe,GAAK,SAASgC,QAAO,SAAA6D,GAAC,MAAS,IAALA,CAAQ,IAAG,GAAGnC,OAAOkG,EAAMxF,MAChJ8G,QAAyB,IAAjBtB,EAAMsB,OAAkBtB,EAAM7D,GAAK6D,EAAMsB,QACjD,IACDpH,OAAOZ,EAAc,IAElBiI,GAAgC,IAAnBH,GAAQjG,OAErBqG,GAAU,IAAIC,IAAIL,GAAQlJ,KAAI,SAAA1C,GAAC,OAAIN,EAAMM,EAAE8L,QAAU9L,EAAEY,KAAO,IAAI,IAAEgC,QAAO,SAAAwB,GAAC,OAAS,MAALA,CAAS,IAAE1B,KAAI,SAAA0B,GAAC,OAAIrE,EAAQqE,EAAE,KAGhH8H,GAAWnM,EAAQmG,IAAqBgE,QAAdA,EAAI0B,GAAQ,cAAE1B,SAAVA,EAAYtJ,OAGxCuL,GAAa,GAAG7H,OAAOqH,IAAW/I,QAAO,SAAA5C,GAAC,OAAS,MAALA,CAAS,IAC1D0C,KAAI,SAAA1C,GAAC,OAAIP,EAAMO,GAAKA,EAAI,CAAEI,IAAKJ,EAAG,IAClC0C,KAAI,SAAA1C,GAAC,IAAAoM,EAAA,OAAA/H,KACDrE,EAAC,CACJ4G,OAAgBwF,QAAVA,EAAEpM,EAAE4G,cAAMwF,IAAAA,EAAAA,EAAIF,IAAQ,IAI1BG,GAAqBpG,IAAsC,IAAtBkG,GAAWxG,OAGhD2G,IAA2B,IAAbtG,EAEpBuG,GAGI9M,EAAMgC,GAAQA,EAAO,CAAErB,IAAKqB,GAFzB+K,GAAMD,GAAXnM,IACIqM,GAAMF,GAAV5F,GAGF+F,GAGIjN,EAAM+B,GAAQA,EAAO,CAAEpB,IAAKoB,GAFzBmL,GAAMD,GAAXtM,IACIwM,GAAMF,GAAV/F,GAIIkG,KAAYtC,SAAAA,GAGZuC,MAAwBN,IAAUG,IAAUrC,GAG9CzC,GAAc8C,QAAAA,GAAkB,EAChCoC,IAAc,EAGZC,GAAgB,IAAI9E,EAEtB+E,IAAc,EACdC,IAAe,EAGbC,GAAiB,IAAIjF,EAGrBkF,GAAc,IAAInE,EAExB,IAAKiC,IAEHmC,MAG2BtB,GAAa,CAAC,CAAA,GAAMH,IAAS0B,MAAK,SAAAC,GAAQ,OAAAA,EAALzG,UAEzC,CAErB,IAAA0G,GAIIrL,EAAYwB,EAAUC,EAAUC,EAAWtB,IAHnCkL,GAASD,GAAnB7J,SACU+J,GAASF,GAAnB5J,SAAqBf,GAAI2K,GAAJ3K,KAAMC,GAAI0K,GAAJ1K,KAChB6K,GAAUH,GAArB3J,UAEFxB,GAAKwH,OAAO6D,IAEZE,GAAyBH,GAAWpL,GAAKsH,KAAM9G,GAAMC,GAAM6K,GAC7D,CAGF,IAAME,GAAS,CAEbC,MAAK,SAACtD,GAGJ,GAFA0B,GAAWA,IAAYtM,IAEnB4K,EAEF,OAAOuD,GAAa,CAAEC,YAAY,GADJxD,EAAtB7D,GAAsB6D,EAAlB5D,OAAkB4D,EAAV1D,OAGpB,IADK,IACsBmH,EADtBC,EAAAA,WACwB,IAAlB1D,EAAKyD,EAAAE,MACNxH,EAAkC6D,EAAlC7D,GAAI3B,EAA8BwF,EAA9BxF,KAAMpE,EAAwB4J,EAAxB5J,KAAMgG,EAAkB4D,EAAlB5D,OAAQE,EAAU0D,EAAV1D,MAGhC,GAAI9B,SAAAA,EAAMsI,MAAK,SAAAtI,GAAI,OAAY,MAARA,IAAyB,IAATA,GAFpB,WAEsCA,CAAmB,KAAa,MAARpE,EAAc,MAAA,CAAAwN,EACtFL,GAAa,CAAEC,YAAY,GAAQrH,EAAIC,EAAQE,KAL1DuH,EAAAC,EAAoB1C,MAAOqC,EAAAI,KAAAE,MAAA,CAAA,IAAAC,EAAAN,IAAA,GAAA,iBAAAM,EAAA,OAAAA,EAAAJ,CAAA,CAQ3B,OAAOL,GAAa,CAAEC,YAAY,GAErC,EAEDjI,KAAI,SAAC0I,GAEH,IAAAC,EAIIvM,EAAYwB,EAAUC,EAAUC,EAAWtB,IAHnCE,EAAKiM,EAAf9K,SACWtB,EAAKoM,EAAhB7K,UACUzB,EAAIsM,EAAd/K,SAGF,GAAI8K,EAAU,CACZ,IAAQ9H,EAA6B8H,EAA7B9H,GAAYgI,EAAiBF,EAAzB7H,OAEZ,OAAOgI,EADQ7O,EAAQ4O,GACDhI,EACxB,CAEE,IADA,IACwBkI,EAD8CC,EAAAA,WAC5C,IAAf/I,EAAI8I,EAAAV,MACLxH,EAAqBZ,EAArBY,GAAI3B,EAAiBe,EAAjBf,KAAM4B,EAAWb,EAAXa,OAGlB,GAAI5B,SAAAA,EAAMsI,MAAK,SAAAtI,GAAI,OAAY,MAARA,IAAyB,IAATA,GAFpB,WAEsCA,CAAmB,IAAG,MAAA,CAAAoJ,EACtEQ,EAAOhI,EAAQD,KAL1BoI,EAAAT,EADcxI,EAASC,EAAMC,EAAUC,GAAc3D,EAAO4J,OACpC2C,EAAAE,KAAAR,MAAA,CAAA,IAAAS,EAAAF,IAAA,GAAA,iBAAAE,EAAA,OAAAA,EAAAZ,CAAA,CAU1B,SAASQ,EAAOhI,EAAQD,GAItB,OAFItE,GAAK+F,WAAW/F,GAAKwH,OAAOpH,GAEzBwM,GAAY,CAAEjB,YAAY,GAAQrH,EAAIC,GAAQ,EAAOtE,EAAOD,GAAKsH,KAAMvH,EAChF,CACD,EAED0G,gBAAeA,WACbkE,GAAclE,kBACdqE,GAAerE,iBAChB,EAEDoG,2BAA0BA,WACxBlC,GAAclE,iBACf,EAEDqG,qBAAoBA,WAClBhC,GAAerE,iBAChB,EAEDuE,kBAAiBA,WACfA,IACD,EAED+B,wBAAuBA,WAErB,IAAAC,EAIIlN,EAAYwB,EAAUC,EAAUC,EAAWtB,IAHnCkL,EAAS4B,EAAnB1L,SACU+J,EAAS2B,EAAnBzL,SACW+J,EAAU0B,EAArBxL,UAEExB,GAAK+F,WAAW/F,GAAKwH,OAAO6D,GAEhCE,GAAyBH,EAAWpL,GAAKsH,KAAMtH,GAAKQ,KAAMR,GAAKS,KAAM6K,EACtE,EAED2B,WAAUA,SAACjG,EAAIkG,GACb,IAAIC,EAAO,KACX,GAAI9P,EAAM6P,GAAU,CAClB,IAAAE,EAIItN,EAAYwB,EAAUC,EAAUC,EAAWtB,IAE/CiN,EAAOD,EAAQ,CAAEnN,KALDqN,EAAd9L,SAKqBtB,KAJPoN,EAAd7L,SAI2Bf,KAJP4M,EAAJ5M,KAIiBC,KAJP2M,EAAJ3M,KAIiBR,MAHvBmN,EAAhB5L,UAG8C6L,KAAM7H,GAAa8H,MAAO5C,UAEvEyC,EAAOD,EAEZ,IAAAK,EAA8DJ,EAAhDK,EAAWD,EAAjBhP,KAAmB+F,EAAEiJ,EAAFjJ,GAAIvG,EAAGwP,EAAHxP,IAAa0P,EAAaF,EAArBhJ,OAC9BhG,EAAOb,EAAQ8P,GACfjJ,EAAS7G,EAAQ+P,GACvB1C,GAAY9E,KAAKe,EAAIzI,GAAM,SAAAZ,GACrBI,SAAAA,EAAMJ,EAAG6H,MACX7H,EAAE+P,iBACFpJ,SAAAA,IACA3F,EAAU4F,GAEd,GACD,EAEDoJ,cAAa,SAAC3G,GACZ+D,GAAY7D,OAAOF,EACpB,EAED4G,WAAU,SAACC,GACT,IAAMC,EAAWD,EAAQxN,KAAI,SAAAC,GAAI,OAAI5C,EAAQ4C,EAAK,IAAEC,QAAO,SAAAD,GAAI,OAAY,MAARA,KACnEN,GAAKwH,OAAOsG,EACb,EAEDnG,EAAC,SAACoG,GACA,OAAI/N,GAAK+G,IAAIgH,IAASnD,IACpBF,GAAalF,GACbA,GAAcuI,EACd1F,SAAAA,EAAS,CAAE1K,EAAG,CAAEqQ,OAAO,GAAQ7O,KAAMa,GAAKsH,KAAKoD,IAAa/I,IAAK3B,GAAKsH,KAAK9B,IAAc8H,MAAO5C,GAAY2C,KAAM7H,KAClHlH,EAAMiD,EAASiE,KACRuI,GAEGvI,EACd,GAGF,OAAOgG,GAEP,SACeE,GAAYuC,EAAAC,EAAAC,EAAAC,GAAA,OAAAC,GAAA1O,MAAAC,KAAAC,UAAA,CAwC3B,SAAAwO,KAFC,OAEDA,GAAAxP,EAAAC,IAAAC,MAxCA,SAAAuP,EAA4B3Q,EAAG0L,EAAS9E,EAAQE,GAAK,IAY1C8J,EAcAC,EAAW,OAAA1P,IAAAG,MAAA,SAAAwP,GAAA,cAAAA,EAAAtP,KAAAsP,EAAArP,MAAA,KAAA,EAFnB,GAEQoP,WAAYvO,EAAOD,EAAMsB,GAChC,IAAMoE,EAAYH,EAAUhB,EAAQtE,EAAOD,EAAMsB,EAAUsC,GAAc4B,GAAaxF,GAAsB,IAAjBwF,GAAqB,EAAIA,IAAc7H,GAC5H+Q,EAAY1O,EAAK2O,QAAQjJ,GAC3BgJ,GAAa,IACfhE,GAAalF,GACbA,GAAckJ,EACdrG,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMa,EAAK0K,IAAa/I,IAAK+D,EAAW4H,MAAO5C,GAAY2C,KAAM7H,KAC/EoF,IAAc,GAEZhH,KAAiB8B,IAAczF,GAASyO,GAAa,KAAI7D,IAAe,GAC5ElM,EAAU+G,IAxBH6I,EAAgC,WACvC,IAAAK,EAII9O,EAAYwB,EAAUC,EAAUC,EAAWtB,IAHnCkL,EAASwD,EAAnBtN,SACU+J,EAASuD,EAAnBrN,SAAqBf,EAAIoO,EAAJpO,KAAMC,EAAImO,EAAJnO,KAChB6K,EAAUsD,EAArBpN,UAEFxB,GAAKwH,OAAO6D,GAEPxC,GACH0C,GAAyBH,EAAWpL,GAAKsH,KAAM9G,EAAMC,EAAM6K,IAC9C,IAAX/G,GACFiK,EAAYlD,EAAYD,EAAWD,KApBnCP,KAAgBD,GAAW,CAAA6D,EAAArP,KAAA,EAAA,KAAA,CAAA,OAAAqP,EAAApP,OAAA,UAAA,KAAA,EAAA,OAAAoP,EAAArP,KAAA,EAEzBiK,eAAAA,EAAU1L,GAAE,KAAA,GAEG8G,EACJ8J,IACZxJ,EAAeN,EAAO8J,GAE3B,KAAA,EAAA,IAAA,MAAA,OAAAE,EAAAhP,OAAA,GAAA6O,EA2BD,KAAAD,GAAA1O,MAAAC,KAAAC,UAAA,CAGD,SAAS+M,GAAYjP,EAAG2G,EAAIC,EAAQE,EAAOxE,EAAOD,EAAMD,EAAM8O,GAAI,IAAAC,EAEhE,IAAKlE,IACDvN,EAAMwR,KAAMA,EAAG,CAAElR,EAAAA,EAAGwB,KAAMa,EAAK0K,IAAa/I,IAAK3B,EAAKwF,IAAc8H,MAAO5C,GAAY2C,KAAM7H,KAC/F,OAAO,EAEToF,IAAc,EAEEkE,QAAhBA,EAAAnR,EAAE+P,sBAAFoB,IAAgBA,GAAhBA,EAAA3R,KAAAQ,GAEA,IAAM+H,EAAYH,EAAUhB,EAAQtE,EAAOD,EAAMD,EAAM6D,GAAc4B,GAAaqE,GAAUlM,GAE5F,OAAI+H,EAGJ,WACiC,OAAAqJ,EAAApP,MAAAC,KAAAC,UAAA,CAJXmP,GAqBrB,WAGmC,OAAAC,EAAAtP,MAAAC,KAAAC,UAAA,CAvBxBqP,GAsBZ,SAAAH,IAFC,OAEDA,EAAAlQ,EAAAC,IAAAC,MAnBA,SAAAoQ,IAAA,IAAAC,EAQWC,EAAwB,OAAAvQ,IAAAG,MAAA,SAAAqQ,GAAA,cAAAA,EAAAnQ,KAAAmQ,EAAAlQ,MAAA,KAAA,EAQhC,OARQiQ,EAAwB,WAC/B/Q,EAAMoH,GACN2C,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMa,EAAKwF,IAAc7D,IAAK+D,EAAW4H,MAAO9H,GAAa6H,MAAO,IAC7ExE,IACCnD,IAAczF,GAChB4M,KACF7B,OAEHsE,EAAAlQ,KAAA,EAdKkF,eAAAA,EAAK3G,GAAE,KAAA,EAEgB,OAA7B8G,UAAK2K,EAAG3K,SAAK,IAAA2K,EAAAA,EAAI3G,EAAY6G,EAAAlQ,KAAA,EACH2F,EAAeN,EAAO4K,GAAyB,KAAA,EAAxDC,EAAAC,MACAF,IAA2B,KAAA,EAAA,IAAA,MAAA,OAAAC,EAAA7P,OAAA,GAAA0P,EAW7C,MAAAxP,MAAAC,KAAAC,UAAA,CAGmC,SAAAoP,IA+BnC,OA/BmCA,EAAApQ,EAAAC,IAAAC,MAApC,SAAAyQ,IAAA,IAAAC,EAAAJ,EAAA,OAAAvQ,IAAAG,MAAA,SAAAyQ,GAAA,cAAAA,EAAAvQ,KAAAuQ,EAAAtQ,MAAA,KAAA,EAAA,IAEoB,IAAdsG,EAAmB,CAAAgK,EAAAtQ,KAAA,EAAA,KAAA,CAAA,OAAAsQ,EAAAtQ,KAAA,EACfkF,eAAAA,EAAK3G,GAAE,KAAA,EAKZ,OAJD0K,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMa,EAAKwF,IAAc7D,IAAK,KAAM2L,MAAO9H,GAAa6H,MAAO,IACxExE,IACHgE,KACA7B,MACD0E,EAAArQ,OAAA,UAAA,KAAA,EAAA,IAGCuE,GAAY,CAAA8L,EAAAtQ,KAAA,GAAA,KAAA,CAAA,OAAAsQ,EAAAtQ,KAAA,EACRkF,eAAAA,EAAK3G,GAAE,KAAA,EACb0K,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMa,EAAKwF,IAAc7D,IAAK,KAAM2L,MAAO9H,GAAa6H,MAAO,IAC7E/O,EAAM2B,GAAOyP,EAAAtQ,KAAA,GAAA,MAAA,KAAA,GAeZ,OAPQiQ,EAAT,WACExF,IAAYvL,EAAMuL,IAClBxB,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMa,EAAKwF,IAAc7D,IAAK,KAAM2L,MAAO9H,GAAa6H,MAAO,IACxExE,IACHgE,KACA7B,OAEH0E,EAAAtQ,KAAA,GAbKkF,eAAAA,EAAK3G,GAAE,KAAA,GAEgB,OAA7B8G,UAAKgL,EAAGhL,SAAK,IAAAgL,EAAAA,EAAIhH,EAAYiH,EAAAtQ,KAAA,GACH2F,EAAeN,EAAO4K,GAAyB,KAAA,GAAxDK,EAAAH,MACAF,IAA2B,KAAA,GAAA,IAAA,MAAA,OAAAK,EAAAjQ,OAAA,GAAA+P,EAW/C,MAAA7P,MAAAC,KAAAC,UAAA,CACH,CAGA,SAAS0L,GAAyBH,EAAWC,EAAWsE,EAAOC,EAAOtE,GAEpE,GAAKX,GAAc5E,QAAnB,CAEA,GAAiB,MAAbqF,EACF,MAAM,IAAIpD,MAAgB1G,UAAAA,EAAuCA,+BAAAA,EAAsB,eACzF,GAAa,MAATqO,GAA0B,MAATC,EACnB,MAAM,IAAI5H,MAAM,qDAElB,IAGM6H,EAAgB,WAAH,QAASnG,IAAoBkB,EAAW,EAGrDkF,EAAqBrF,GA/pBK,SAAClJ,EAAUwO,EAAgBC,EAAexF,EAASL,EAAQG,EAAQF,EAAQG,EAAQ/I,EAAW6G,EAAQuC,GAAW,OAAK,SAAAjN,GACxJ,GAAIA,EAAE4G,SAAW/C,GACZoJ,IAAL,CAEA,IAAAqF,EAA2BF,IAApBG,EAAMD,EAAA,GAAEE,EAAQF,EAAA,GACdG,EAAWJ,IAAJ,GACVK,EAAQC,KAAKC,IAAI,EAAGL,GACpBM,EAAWjP,EAAS+B,OAC1B,IAAK6G,QAAAA,EAAUhM,GAAcR,GAAI,CAC/B,IAAM8S,EAAYJ,EAAQ,EACtBK,EAAQlG,EAAU8F,KAAKK,IAAIH,EAAW,EAAGC,GAAaA,EAC1DC,GAASF,EACTpG,SAAAA,EAAS,CAAEzM,EAAAA,EAAGwB,KAAMoC,EAAS8O,GAAQ1O,IAAKJ,EAASmP,GAAQpD,MAAO+C,EAAOhD,KAAMqD,IAC/ErI,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMoC,EAAS8O,GAAQ1O,IAAKJ,EAASmP,GAAQpD,MAAO+C,EAAOhD,KAAMqD,IAC/EP,EAASO,GACTN,EAAQC,GACR/R,EAAMiD,EAASmP,IACf/S,EAAE+P,gBACJ,MACK,IAAKpD,QAAAA,EAAUjM,GAAeV,GAAI,CACrC,IAAMiT,EAAYP,EAAQ,EACtBK,EAAQlG,EAAU8F,KAAKC,IAAI,EAAGK,GAAaA,EAC/CF,GAASA,EAAQF,GAAYA,EAC7BjG,SAAAA,EAAS,CAAE5M,EAAAA,EAAGwB,KAAMoC,EAAS8O,GAAQ1O,IAAKJ,EAASmP,GAAQpD,MAAO+C,EAAOhD,KAAMqD,IAC/ErI,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMoC,EAAS8O,GAAQ1O,IAAKJ,EAASmP,GAAQpD,MAAO+C,EAAOhD,KAAMqD,IAC/EP,EAASO,GACTN,EAAQC,GACR/R,EAAMiD,EAASmP,IACf/S,EAAE+P,gBACJ,CA3BoB,EA4BrB,CAkoBKmD,CAA4BxF,GAPP,WAAH,MAAS,CAAC7F,GAAa,SAAAsL,GAAM,OAAItL,GAAcsL,GAAO,IACpD,WAAH,MAAS,CAAA,CAAG,SAAA3R,GAAI,OAAIuL,GAAavL,GAAK,GAMeqL,GAASL,GAAQG,GAAQF,GAAQG,GAAQe,EAAYjD,EAAQwH,GA/nBxG,SAAC7P,EAAMwK,EAASJ,EAAQG,EAAQjJ,EAAUE,EAAWoJ,GAAW,OAAK,SAAAjN,GACpG,IAAM6C,EAAOR,EAAK,GACZS,EAAOT,EAAK0H,IAAI,GAChBqJ,EAAUpT,EAAE4G,OACdwM,IAAYvP,GACXoJ,MAEDzM,EAAaR,IACfyM,SAAAA,EAAS,CAAEzM,EAAAA,IACPoT,IAAYtQ,IACd9C,EAAE+P,iBACGlD,GAASlM,EAAMkC,IAElBuQ,IAAYzP,IACd3D,EAAE+P,iBACFpP,EAAMkC,KAGDnC,EAAcV,KACrB4M,SAAAA,EAAS,CAAE5M,EAAAA,IACPoT,IAAYvQ,IACd7C,EAAE+P,iBACGlD,GAASlM,EAAMmC,IAElBsQ,IAAYzP,IACd3D,EAAE+P,iBACFpP,EAAMmC,MAGX,CAmmBKuQ,CAAyB3F,EAAWb,GAASJ,GAAQG,GAAQa,EAAWE,EAAYuE,GAGhF1N,EAAQsB,EAASC,EAAMC,EAAUC,GAAc0H,EAAYzB,IACjEoH,EAII/O,EAAWC,EAAOiJ,GAHpBrI,EAAQkO,EAARlO,SAAUC,EAAUiO,EAAVjO,WAAYC,EAAUgO,EAAVhO,WAAYI,EAAa4N,EAAb5N,cAAeE,EAAa0N,EAAb1N,cAAeC,EAAWyN,EAAXzN,YAChEN,EAAe+N,EAAf/N,gBAAiBC,EAAe8N,EAAf9N,gBACjBC,EAAY6N,EAAZ7N,aAII8N,EAA6BhO,EAAgB7C,KAAI,SAAAqD,GAAI,MAAI,CAAChG,EAAQgG,aAAAA,EAAAA,EAAMnF,MAAO4S,GAA0BzN,OACzG0N,EAA6BjO,EAAgB9C,KAAI,SAAAqD,GAAI,MAAI,CAAChG,EAAQgG,aAAAA,EAAAA,EAAMnF,MAAO8S,GAA0B3N,QA6P/G,WAEEiH,GAAc1E,KAAKmF,EAAW,UAAWkG,GAEzC3G,GAAc1E,KAAKmF,EAAW,WAAYmG,GAErCnG,EAAUtK,SAASwK,IAA6B,MAAdA,IAErCX,GAAc1E,KAAKqF,EAAY,QAASkG,GAExC7G,GAAc1E,KAAKqF,EAAY,OAAQmG,IAGzC9G,GAAc1E,KAAKmF,EAAW,WAAW,SAAAzN,GAEvCmS,EAAmBnS,GAEf6F,GA1CR,SAA4B7F,GAC1B,GAAIA,EAAE4G,SAAW+G,EAAY,OAE7B,GAAIrB,IAAehM,EAAcN,GAAI,OAErC,IAAA,IAA2B+T,EAA3BC,EAAA1F,EAAmBlJ,KAAQ2O,EAAAC,KAAAzF,MAAE,CAE3B,GADa0F,EAAejU,EADf+T,EAAA5F,OAEH,KACZ,CACF,CAiCqB+F,CAAmBlU,EACtC,IAEI8M,IAEFE,GAAc1E,KAAKmF,EAAW,QAAS0G,GAIzCnH,GAAc1E,KAAKmF,EAAW,YAAa2G,GAEvC1O,GAEFsH,GAAc1E,KAAKmF,EAAW,QAAS4G,GAGrCzO,GAEFoH,GAAc1E,KAAKmF,EAAW,UAAW6G,GAI3Cb,EAA2B/K,SAAQ,SAAA6L,GAAqB,IAAnB3T,EAAI2T,EAAA,GAAEhM,EAAOgM,EAAA,GAChDvH,GAAc1E,KAAK1H,EAAM,QAAS2H,EACpC,IACAgL,EAA2B7K,SAAQ,SAAA8L,GAAqB,IAAnB5T,EAAI4T,EAAA,GAAEjM,EAAOiM,EAAA,GAChDxH,GAAc1E,KAAK1H,EAAM,QAAS2H,EACpC,IAEkB,MAAdoF,GAEFX,GAAc1E,KAAKqF,EAAY,UAAW8G,GAI5CzH,GAAcvE,cAChB,CA/SA2G,GAEA,IAAIsF,GAAc,EAEdC,GAAmB,CAlCK,CAwC5B,SAAShB,EAAqB3T,GAE5B,IAAM6Q,EAAc7Q,EAAE4G,OAGtB,GAAIX,IAAgB4K,IAAgBlD,EAClCT,IAAe,OAKjB,GAAIjH,KAAgC,IAAhByO,IAA0C,IAAjBxH,GAC3ClM,EAAU2M,OADZ,CAMA,IAAyB,IAArB/C,GAA8BkC,KAAsC,IAAhBG,KAAyC,IAAhByH,EACjF,CAAA,IAAAE,EACQC,EAAyJD,QAAhIA,EAAGhK,aAAAA,EAAAA,EAAmB,CAAEvI,KAAMqL,EAAWpL,MAAOqL,EAAYvL,KAAMqL,EAAWzF,KAAM0F,EAAU7F,IAAcI,MAAOJ,gBAAc+M,EAAAA,GAAsB,IAAjB/M,GAAqB6F,EAAU,GAAKA,EAAU7F,IAC5MiN,EAAsB/U,EAAQ8U,GAC9BE,EAAcrH,EAAUsH,WAAU,SAAArS,GAAI,OAAIA,IAASmS,KACrDC,GAAe,IACjBhI,GAAalF,GACbA,GAAckN,EACdrK,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMkM,EAAUX,IAAa/I,IAAK0J,EAAU7F,IAAc8H,MAAO5C,GAAY2C,KAAM7H,MAEnG7G,EAAU8T,EACZ,CAEA7H,IAAc,CAhBd,CAiBF,CAEA,SAAS2G,EAAoB5T,GAEvBgM,GAAQ5C,IAAIpJ,EAAEiV,gBAElBpT,YAAW,WAET,IAAMqT,EAAStV,IACTuV,GAAiB1H,EAAUtK,SAAS+R,GACpCE,EAAgBF,IAAWvH,EAGjC,GAAI3N,EAAE4G,SAAW+G,GAAcwH,EAC7BjI,IAAe,MADjB,CAKA,IAAImI,EAAY,MACZD,GAAiBD,KAAeE,EAyGxC,SAA4BrV,GAC1B,IAAA,IAA+BsV,EAA/BC,EAAAjH,EAAmB7I,KAAY6P,EAAAC,KAAAhH,MAAE,CAAA,IAAtBxI,EAAIuP,EAAAnH,MACLxH,EAAqCZ,EAArCY,GAAYmJ,EAAyB/J,EAAjCa,OAAuBE,EAAUf,EAAVe,MAEnC,OAAOmI,GAAYjP,EAAG2G,EADP5G,EAAQ+P,GACWhJ,EAAO6G,EAAYD,EAAWD,EAAW1H,KAC7E,CACF,CA/GoDyP,CAAmBxV,KACjD,IAAdqV,IAEAD,EACFnI,IAAc,EACLkI,IACTlI,IAAc,EACdC,IAAe,GAVjB,CAYF,GACF,CAEA,SAASkH,EAAyBpU,GAMhC,IAAIyV,EALJf,GAAc,EACd7S,YAAW,WACT6S,GAAc,CAChB,MAGK5H,IACFA,KAAuB2I,EAAa/H,EAAUgI,MAAK,SAAA/S,GAAI,OAAIA,EAAKQ,SAASnD,EAAE4G,OAAO,QACnFqG,IAAc,EACVhH,KAAciH,IAAe,GAC7B9B,GAAoCqK,QAAgCjP,IAAlBmP,OAAOC,SAC3DjV,EAAM8U,GACNzV,EAAE+P,kBAGR,CAGA,SAASoE,EAAqBnU,GAC5B,IAAM4G,EAAS5G,EAAE4G,OACXmO,EAAcrH,EAAUsH,WAAU,SAAAhV,GAAC,OAAIA,EAAEmD,SAASyD,MACpDmO,GAAe,IACjBhI,GAAalF,GACbA,GAAckN,EAEdtK,SAAAA,EAAU,CAAEzK,EAAAA,EAAGwB,KAAMkM,EAAUX,IAAa/I,IAAK0J,EAAU7F,IAAc8H,MAAO5C,GAAY2C,KAAM7H,KAC9FkF,KAAelF,KAA+B,IAAhBoF,IAChCvC,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAMkM,EAAUX,IAAa/I,IAAK0J,EAAU7F,IAAc8H,MAAO5C,GAAY2C,KAAM7H,KAEvG,CAMA,SAASgM,IAA0B3G,IAAe,CAAO,CAEzD,SAAS4G,IACHa,EACFA,GAAmB,EAGrBzH,IAAe,CACjB,CAGA,SAASuH,EAAgBzU,GACvB,GAAIA,EAAE4G,SAAW+G,GACXT,KAAiBD,GAAvB,CAGA,IAAI1B,QAAAA,EAAiBpL,GAAcH,KAAOiN,GAQxC,OAPAjN,EAAE+P,iBACF4E,GAAmB,EACnB1H,IAAc,EACdxB,SAAAA,EAAezL,GAEfW,EAAM+M,EADN7F,IAA+B,IAAjBA,GAAqB,EAAIA,UAEvC6C,SAAAA,EAAS,CAAE1K,EAAAA,EAAGwB,KAAM,KAAMwC,IAAK0J,EAAU7F,IAAc8H,MAAO,KAAMD,KAAM7H,MAK5E,IAAA,IAA2BgO,EAA3BC,EAAAxH,EAAiBnC,MAAU0J,EAAAC,KAAAvH,MAAE,CAAA,IAApBxI,EAAI8P,EAAA1H,MACH/N,EAA4B2F,EAA5B3F,IAAKuG,EAAuBZ,EAAvBY,GAAYoP,EAAWhQ,EAAnBa,OACXA,EAAS7G,EAAQgW,GACvB,GAAI3V,SAAAA,EAAMJ,EAAG6H,IAEX,YADAmO,EAAiBhW,EAAG2G,EAAIC,EAG5B,CAGIyF,IACF7L,EAAaR,IACbW,EAAMsR,EA3BoC,CAgC5C,SAAS+D,EAAiBhW,EAAG8L,EAAQlF,GACnCkF,SAAAA,EAAS9L,GACT4G,GAAUjG,EAAMiG,GAChBsI,IACF,CACF,CAeA,SAAS+G,EAAiBjW,EAAG+F,GAC3B,IAAc8J,EAAkD9J,EAAxDnF,KAAmB+F,EAAqCZ,EAArCY,GAAYmJ,EAAyB/J,EAAjCa,OAAuBE,EAAUf,EAAVe,MAChDlG,EAAOb,EAAQ8P,GACfjJ,EAAS7G,EAAQ+P,GAEvB,QACW,MAARlP,IAAiBA,EAAKuC,SAASnD,EAAE4G,SAC1B,MAARhG,KACFqO,GAAYjP,EAAG2G,EAAIC,EAAQE,EAAO6G,EAAYD,EAAWD,EAAW1H,OAC7D,EACT,CAGA,SAASsO,EAAqBrU,GAC5B,IAAA,IAA6BkW,EAA7BC,EAAA7H,EAAmBjJ,KAAU6Q,EAAAC,KAAA5H,MAAE,CAE7B,GADa0H,EAAiBjW,EADjBkW,EAAA/H,OAEH,KACZ,CACF,CAEA,SAASiI,EAAiBpW,EAAG+F,GAC3B,IAAc8J,EAAkD9J,EAAxDnF,KAAmB+F,EAAqCZ,EAArCY,GAAYmJ,EAAyB/J,EAAjCa,OAAuBE,EAAUf,EAAVe,MAChDlG,EAAOb,EAAQ8P,GACfjJ,EAAS7G,EAAQ+P,GAEvB,OACW,MAARlP,GAAgBZ,EAAE4G,SAAWhG,IACtB,MAARA,IACFqO,GAAYjP,EAAG2G,EAAIC,EAAQE,EAAO6G,EAAYD,EAAWD,EAAW1H,OAC7D,EACT,CAGA,SAASuO,EAAqBtU,GAE5B,IAAA,IAA6BqW,EAA7BC,EAAAhI,EAAmBhJ,KAAU+Q,EAAAC,KAAA/H,MAAE,CAE7B,GADa6H,EAAiBpW,EADjBqW,EAAAlI,OAEH,KACZ,CACF,CAEA,SAAS8F,EAAejU,EAAG+F,GACzB,IAAM3F,EAA8C2F,EAA9C3F,IAAWyP,EAAmC9J,EAAzCnF,KAAmBgG,EAAsBb,EAAtBa,OAAQD,EAAcZ,EAAdY,GAAIG,EAAUf,EAAVe,MACpClG,EAAOb,EAAQ8P,GACrB,OAAY,MAARjP,GAAgBZ,EAAE4G,SAAWhG,KAC7BR,SAAAA,EAAMJ,EAAG6H,KACXoH,GAAYjP,EAAG2G,EAAIC,EAAQE,EAAO6G,EAAYD,EAAWD,EAAW1H,OAC7D,QAFT,EAIF,CAcA,SAASyN,GAA0BzN,GACjC,OAAO,SAAS/F,GAAKiW,EAAiBjW,EAAG+F,GAC3C,CAEA,SAAS2N,GAA0B3N,GACjC,OAAO,SAAS/F,GAAKoW,EAAiBpW,EAAG+F,GAC3C,CA8DF,CAGA,SAASsH,KAEP,GAAKF,GAAe/E,QAApB,CAEA,IAFoC,IAEXmO,EAFWC,EAAAA,WAET,IAAlBhM,EAAK+L,EAAApI,MACE4H,EAAiDvL,EAAvD5J,KAAc+F,EAAyC6D,EAAzC7D,GAAIvG,EAAqCoK,EAArCpK,IAAK4E,EAAgCwF,EAAhCxF,KAAM4B,EAA0B4D,EAA1B5D,OAAQE,EAAkB0D,EAAlB1D,MAAOgF,EAAWtB,EAAXsB,OAC9CoF,EAAK1G,EAAQ,GACbiM,EAAQ,GAAGnS,OAAOU,GAClB0R,EAAW,CAAC,UAAW,QAAS,SAChC9V,EAAOb,EAAQgW,GAWrB,SAASY,EAAgB3W,GACnBI,UAAAA,EAAMJ,EAAG6H,KACVnI,EAAMwR,KAAMA,EAAG,CAAElR,EAAAA,EAAGwB,KAAMa,GAAKsH,KAAKoD,IAAa/I,IAAK3B,GAAKsH,KAAK9B,IAAc8H,MAAO5C,GAAY2C,KAAM7H,MACxG+O,EAAmB5W,GAAG,EAC1B,CAEA,SAAS6W,EAAmB7W,GACpBN,EAAMwR,KAAMA,EAAG,CAAElR,EAAAA,EAAGwB,KAAMa,GAAKsH,KAAKoD,IAAa/I,IAAK3B,GAAKsH,KAAK9B,IAAc8H,MAAO5C,GAAY2C,KAAM7H,MAE7G+O,EAAmB5W,EACrB,CAEA,SAAS4W,EAAmB5W,EAAG8W,GAC7B,GAAI7J,IACF,GAAIvN,EAAMoM,GAAS,CACjB,IAAAiL,EAII5U,EAAYwB,EAAUC,EAAUC,EAAWtB,IAHnCF,EAAI0U,EAAdnT,SACWtB,EAAKyU,EAAhBlT,UACUzB,EAAI2U,EAAdpT,SAEFmT,GAAS9W,EAAE+P,iBACXd,GAAYjP,EAAG8L,EAAQlF,GAAQ,EAAOtE,EAAOD,EAAMD,EACrD,OAGA0U,GAAS9W,EAAE+P,iBACXhC,GAAa/N,EAAG2G,EAAIC,EAAQE,GACxBmE,IAA6BC,GAC/BiC,GAAerE,iBAErB,CAvCA2N,EAAM/N,SAAQ,SAAA1D,GACZ,GAAIpE,GAAQ8V,EAASxR,SAASF,GAAO,CACnC,IAAMuD,EAAmB,YAATvD,EACZ2R,EACAE,EACJ1J,GAAe7E,KAAK1H,EAAMoE,EAAMuD,EAClC,CACF,KAdFyO,EAAA1I,EAAkB1C,MAAO2K,EAAAS,KAAAzI,MAAAiI,IAkDzBrJ,GAAe1E,cApDc,CAqD/B,CAGA,SAASyG,KAGH7C,IAEArB,IAA4BE,GAC9B8B,GAAclE,iBAElB,CACF"}