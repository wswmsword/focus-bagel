{"version":3,"file":"focus-no-jutsu.umd.js","sources":["../utils.js","../index.js"],"sourcesContent":["/** Object.prototype.toString.call 快捷方式 */\nexport const objToStr = obj => Object.prototype.toString.call(obj);\n\n/** 参数是否是对象 */\nexport const isObj = obj => objToStr(obj) === \"[object Object]\";\n\n/** 是否为函数 */\nexport const isFun = fun => objToStr(fun) === \"[object Function]\";\n\n/** document.activeElement 的快捷方式 */\nexport const getActiveElement = () => document.activeElement;\n\n/** document.querySelector 的快捷方式 */\nexport const querySelector = str => document.querySelector(str);\n\n/** 通过字符串查找节点，或者直接返回节点 */\nexport const element = e => typeof e === \"string\" ? querySelector(e) : e;\n\n/** 滴答 */\nexport const tick = function(fn) {\n  setTimeout(fn, 0);\n};\n\n/** 是否是 input 可 select 的元素 */\nexport const isSelectableInput = function(node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\n/** 是否按下了 enter */\nexport const isEnterEvent = function(e) {\n  return e.key === \"Enter\" || e.keyCode === 13;\n};\n\n/** 按键是否是 esc */\nexport const isEscapeEvent = function (e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\n\n/** 按键是否是 tab */\nexport const isTabEvent = function(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n/** 是否是向前的 tab */\nexport const isTabForward = function(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n/** 是否是向后的 tab */\nexport const isTabBackward = function(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\n/** 找到两个元素的最小公共祖先元素 */\nexport const findLowestCommonAncestorNode = function(x, y) {\n  if (x == null || y == null) return null;\n  if (x.contains(y)) return x;\n  if (y.contains(x)) return y;\n\n  const range = new Range();\n  range.setStartBefore(x);\n  range.setEndAfter(y);\n  if (range.collapsed) {\n     range.setStartBefore(y);\n     range.setEndAfter(x);\n  }\n  return range.commonAncestorContainer;\n};","import { objToStr, isObj, isFun, getActiveElement, element, tick, isSelectableInput, isEnterEvent, isEscapeEvent, isTabForward, isTabBackward, findLowestCommonAncestorNode } from \"./utils\";\nlet isDemo = false;\n/** 聚焦，如果是 input，则聚焦后选中 */\nconst focus = function(e) {\n  e.focus();\n  if (isSelectableInput(e))\n    e.select();\n  return true;\n};\n\n/** 尝试聚焦，如果聚焦失效，则下个 setTimeout 再次聚焦 */\nconst tickFocus = async function(e) {\n  return new Promise(resolve => {\n    if (e == null) tick(() => resolve(e && focus(e)));\n    else resolve(focus(e));\n  });\n};\n\n/** 手动聚焦下一个元素 */\nconst focusNextListItemBySequence = (subNodes, useActiveIndex, usePrevActive, isClamp, isNext, isPrev, onNext, onPrev, coverNode, onMove, trappedList) => e => {\n  if (e.target === coverNode) return;\n  if (!trappedList()) return;\n\n  const [index_, setIndex] = useActiveIndex();\n  const [, setPrev] = usePrevActive();\n  const index = Math.max(0, index_);\n  const itemsLen = subNodes.length;\n  if ((isNext ?? isTabForward)(e)) {\n    const incresedI = index + 1;\n    let nextI = isClamp ? Math.min(itemsLen - 1, incresedI) : incresedI;\n    nextI %= itemsLen;\n    onNext?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    onMove?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    setIndex(nextI);\n    setPrev(index);\n    focus(subNodes[nextI]);\n    e.preventDefault();\n  }\n  else if ((isPrev ?? isTabBackward)(e)) {\n    const decresedI = index - 1;\n    let nextI = isClamp ? Math.max(0, decresedI) : decresedI;\n    nextI = (nextI + itemsLen) % itemsLen;\n    onPrev?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    onMove?.({ e, prev: subNodes[index], cur: subNodes[nextI], prevI: index, curI: nextI });\n    setIndex(nextI);\n    setPrev(index);\n    focus(subNodes[nextI]);\n    e.preventDefault();\n  }\n};\n\n/** 按下 tab，以浏览器的行为聚焦下个元素 */\nconst focusNextListItemByRange = (list, isClamp, onNext, onPrev, rootNode, coverNode, trappedList) => e => {\n  const head = list[0];\n  const tail = list.at(-1);\n  const current = e.target;\n  if (current === coverNode) return;\n  if (!trappedList()) return;\n\n  if (isTabForward(e)) {\n    onNext?.({ e });\n    if (current === tail) {\n      e.preventDefault();\n      if (!isClamp) focus(head);\n    }\n    if (current === rootNode) {\n      e.preventDefault();\n      focus(head)\n    }\n  }\n  else if (isTabBackward(e)) {\n    onPrev?.({ e });\n    if (current === head) {\n      e.preventDefault();\n      if (!isClamp) focus(tail);\n    }\n    if (current === rootNode) {\n      e.preventDefault();\n      focus(tail);\n    }\n  }\n};\n\n/** 获取关键节点 */\nconst getKeyNodes = function(root, list, cover, coverIsRoot) {\n  const _list = list.map(item => element(item)).filter(item => item != null);\n  const head = _list[0];\n  const tail = _list.slice(-1)[0];\n  const _root = element(root) ?? findLowestCommonAncestorNode(head, tail);\n  const _cover = coverIsRoot ? _root : element(cover);\n\n  return {\n    rootNode: _root,\n    subNodes: _list,\n    head,\n    tail,\n    coverNode: _cover,\n  };\n};\n\n/** 用于处理节点属性可以传递数组的情况，用于入口和出口 */\nconst nodesReducer = function(acc, cur) {\n  const isAryNodes = Array.isArray(cur.node);\n  const nodes = isAryNodes ? cur.node.map(n => ({\n    ...cur,\n    node: n,\n  })) : cur;\n  return acc.concat(nodes);\n};\n\n/** 获取分割的出口 */\nconst splitExits = function(exits, root) {\n  /** 生效的节点是否在根元素内部（列表中） */\n  const isInnerRoot = node => (node != null && root.contains(element(node))) || node == null;\n\n  const [keyExits, clickExits, focusExits, clickExits_wild, focusExits_wild, outListExits] = exits.reduce((acc, e) => {\n    let [key, click, focus, click_wild, focus_wild, outList] = acc;\n    const includeType = type => e.type?.includes(type);\n    if (isInnerRoot(e.node)) {\n      if (includeType(\"keydown\")) key = key.concat(e);\n      if (includeType(\"click\")) click = click.concat(e);\n      if (includeType(\"focus\")) focus = focus.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    } else {\n      if (includeType(\"click\")) click_wild = click_wild.concat(e);\n      if (includeType(\"focus\")) focus_wild = focus_wild.concat(e);\n      if (includeType(\"outlist\")) outList = outList.concat(e);\n    }\n    return [key, click, focus, click_wild, focus_wild, outList];\n  }, new Array(6).fill([]));\n\n  const hasClickExits = clickExits.length > 0;\n  const hasFocusExits = focusExits.length > 0;\n  const hasKeyExits = keyExits.length > 0;\n  \n  return {\n    keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n    clickExits_wild, focusExits_wild,\n    outListExits,\n  };\n}\n\n/** 获取（生成）出口 */\nconst getExits = function(exit, onEscape, enabledCover, cover, trigger) {\n\n  let tempExits = [].concat(exit).filter(o => o != null)\n    .map(ele => isObj(ele) ? ele : { node: ele })\n    .map(e => ({\n      ...e,\n      // undefined 表示用户没有主动设置\n      type: e.type === undefined ? [e.key == null ? '' : \"keydown\", e.node == null ? '' : \"click\"].filter(t => t !== '') : [].concat(e.type),\n    }))\n    .reduce(nodesReducer, []);\n  let _onEscape = isFun(onEscape) ? onEscape : onEscape === true ? tempExits[0]?.on ?? (() => {}) : onEscape;\n  /** 按下 esc 的出口 */\n  const escapeExit = isFun(_onEscape) ? {\n    node: null,\n    key: isEscapeEvent,\n    on: _onEscape,\n    target: enabledCover ? cover : trigger,\n    type: [\"keydown\"],\n  } : null;\n  const exits = [escapeExit].concat(tempExits).filter(e => e != null);\n\n  return exits;\n};\n\n/** 获取聚焦或失焦时延迟的类型 */\nconst getDelayType = function(delay) {\n  const isFunctionDelay = isFun(delay);\n  const delayRes = isFunctionDelay && delay(() => {});\n  const promiseDelay = isFunctionDelay && objToStr(delayRes) === \"[object Promise]\";\n  const callbackDelay = isFunctionDelay && !promiseDelay;\n  const commonDelay = (delay === true) && !promiseDelay && !callbackDelay;\n  return {\n    promiseDelay,\n    callbackDelay,\n    commonDelay,\n  };\n};\n\n/** 延迟执行某些操作 */\nconst delayToProcess = async function(delay, processor) {\n\n  const { promiseDelay, callbackDelay, commonDelay } = !!delay ? getDelayType(delay) : {};\n  if (promiseDelay) {\n    await delay(() => {});\n    processor();\n  }\n  else if (callbackDelay) delay(processor);\n  else if (commonDelay) processor();\n  else return true;\n};\n\n/** 获取出口或者入口的目标 */\nconst getTarget = function(target, cover, list, root, enabledCover, activeIndex, defaultTarget, e) {\n  // 空 target 走默认\n  if (target == null || target === true) {\n    if (enabledCover) return cover;\n    else return defaultTarget;\n  }\n  // 函数 target 则传入节点执行\n  else if (isFun(target)) {\n    const gotTarget = target({ e, list, cover, root, last: list[activeIndex], lastI: activeIndex });\n    if (gotTarget == null || gotTarget === true) {\n      if (enabledCover) return cover;\n      else return defaultTarget;\n    }\n    return gotTarget;\n  }\n  // 选择器字符串或者节点，则直接获取\n  else return element(target);\n};\n\n/** 保存的监听事件信息，方便监听和移除监听 */\nclass ListenersCache {\n  cache = [];\n  isEmpty = true;\n  push(node, type, handler) {\n    this.isEmpty = false;\n    this.cache.push({\n      node,\n      type,\n      handler,\n    });\n  }\n  clean() {\n    this.cache = [];\n    this.isEmpty = true;\n  }\n  addListeners() {\n    this.cache.forEach(l => l.node?.addEventListener(l.type, l.handler));\n  }\n  removeListeners() {\n    this.cache.forEach(l => l.node?.removeEventListener(l.type, l.handler));\n    this.clean();\n  }\n}\n\n/** 按键转发的缓存 */\nclass KeyForwardCache {\n  cache = new Map();\n  has(id) {\n    return this.cache.has(id);\n  }\n  push(id, node, handler) {\n    if (this.has(id)) return;\n    node.addEventListener(\"keydown\", handler);\n    this.cache.set(id, {\n      node,\n      handler,\n    })\n  }\n  remove(id) {\n    const ids = [].concat(id);\n    ids.forEach(id => this.cache.get(id).node.removeEventListener(\"keydown\", this.cache.get(id).handler));\n  }\n}\n\n/** 保存列表数据 */\nclass TabList {\n  data = [];\n  head = null;\n  tail = null;\n  update(list) {\n    this.data.splice(0, this.data.length);\n    Array.prototype.push.apply(this.data, list);\n    this.head = list[0];\n    this.tail = list.at(-1);\n  };\n  isEmpty() {\n    return this.data.length === 0;\n  };\n  has(i) {\n    return !!this.data[i];\n  }\n}\n\nconst focusNoJutsu = (...props) => {\n  const offset = 0 - (props[0] instanceof Array);\n  const rootNode = props[0 + offset];\n  const subNodes = props[1 + offset];\n  const options  = props[2 + offset] ?? {};\n\n  if (!(Array.isArray(subNodes) && subNodes.length > 1))\n    throw new Error(\"请至少传入一个数组，数组至少包含两个可聚焦元素，用来表示列表的头和尾。\");\n\n  const {\n    /** move: tab 序列，指定可以聚焦的元素，聚焦 list 内的元素 */\n    sequence,\n    /** move: 是否循环，设置后，尾元素的下个焦点是头元素，头元素的上个焦点是尾元素 */\n    loop,\n    /** move: 自定义前进焦点函数 */\n    next,\n    /** move: 自定义后退焦点函数 */\n    prev,\n    /** focus/blur: 触发器，如果使用 focusNoJutsu.enter 则不用设置，如果使用 entry.selector 则不用设置 */\n    trigger,\n    /** focus: 触发触发器的配置 */\n    entry,\n    /** blur: 触发退出触发器的配置 */\n    exit,\n    /** blur: 按下 esc 的行为，如果未设置，则取 exit.on */\n    onEscape,\n    /** 点击列表单项的响应，行为 */\n    onClick,\n    /** 移动的时候触发 */\n    onMove,\n    /** cover: 封面，默认情况，触发入口后首先聚焦封面，而不是子元素 */\n    cover,\n    /** 初始的 activeIndex */\n    initialActive,\n    /** 矫正列表的焦点 */\n    correctionTarget,\n    /** 延迟挂载非触发器元素的事件，可以是一个返回 promise 的函数，可以是一个接收回调函数的函数 */\n    delayToFocus,\n    /** 延迟失焦，触发出口后等待执行 delayToBlur 完成后失焦 */\n    delayToBlur,\n    /** 每次退出列表回到入口是否移除列表事件 */\n    removeListenersEachExit = true,\n    /** 每次进入列表是否移除入口事件 */\n    removeListenersEachEnter,\n    /** 手动添加和移除监听事件，入口、列表、出口的监听事件，`removeListenersEachExit` 和 `removeListenersEachEnter` 将失效 */\n    manual,\n    /** 用于抹平 Safari 不同于其它浏览器，点击后 button 之类的元素不会被聚焦的问题 */\n    allowSafariToFocusAfterMousedown = true,\n    /** 用于内部调试 */\n    demo = false,\n  } = options;\n  isDemo = demo;\n\n  const {\n    /** 封面节点 */\n    node: coverNode,\n    enterKey: coverEnterKey,\n    onEnter: onEnterCover,\n    exit: exitCover,\n  } = isObj(cover) ? cover : {};\n\n  /** 是否已经打开封面选项 */\n  const enabledCover = cover != null && cover !== false && coverNode !== false;\n\n  /** 封面即根元素 */\n  const coverIsRoot = enabledCover && (cover === true || coverNode === true || coverNode == null);\n\n  /** 列表 */\n  const list = new TabList();\n\n  /** 入口们 */\n  const entries = [].concat(entry).filter(o => o != null)\n    .map(ele => isObj(ele) ? ele : { node: ele })\n    .map(entry => ({\n      ...entry,\n      delay: entry.delay ?? delayToFocus,\n      type: entry.type === undefined ? [entry.key == null ? '' : \"keydown\", entry.node == null ? '' : \"click\"].filter(t => t != '') : [].concat(entry.type),\n      onExit: entry.onExit === true ? entry.on : entry.onExit,\n    }))\n    .reduce(nodesReducer, []);\n  /** 是否是空入口 */\n  const hasNoEntry = entries.length === 0;\n  /** 带切换的入口 */\n  const toggles = new Set(entries.map(e => isFun(e.onExit) ? e.node : null).filter(n => n != null).map(n => element(n)));\n\n  /** 默认入口 */\n  let _trigger = element(trigger || entries[0]?.node);\n\n  /** 退出封面，封面的出口们 */\n  const exitsCover = [].concat(exitCover).filter(e => e != null)\n    .map(e => isObj(e) ? e : { key: e })\n    .map(e => ({\n      ...e,\n      target: e.target ?? _trigger,\n    }));\n\n  /** 是否使用默认的离开封面方法，也即 tab 和 shift-tab */\n  const isDefaultExitCover = enabledCover && exitsCover.length === 0;\n\n  /** 禁用左上角 esc 出口 */\n  const disabledEsc = onEscape === false;\n\n  const {\n    key: isNext,\n    on: onNext,\n  } = isObj(next) ? next : { key: next };\n\n  const {\n    key: isPrev,\n    on: onPrev,\n  } = isObj(prev) ? prev : { key: prev };\n\n  /** 取消循环则设置头和尾焦点 */\n  const isClamp = !(loop ?? true);\n\n  // 自定义前进或后退焦点函数，则设置 sequence 为 true\n  const enabledTabSequence = !!(isNext || isPrev || sequence);\n\n  /** 活动元素在列表中的编号，打开 sequence 生效 */\n  let activeIndex = initialActive ?? -1;\n  let prevActive = -1;\n\n  /** 是否已添加监听事件 */\n  const listListeners = new ListenersCache();\n\n  let trappedList = false;\n  let trappedCover = false;\n\n  /** 是否已添加入口的监听事件 */\n  const entryListeners = new ListenersCache();\n\n  /** 按键转发 */\n  const keyForwards = new KeyForwardCache();\n\n  if (!manual) { // 如果不是手动添加事件，则注册入口、列表相关（封面、列表、出口）的事件\n    // 入口点击事件\n    addEntryListeners();\n\n    // 如果有入口不需要延迟，则立即加载列表的监听事件\n    const hasImmediateEntry = (hasNoEntry ? [{}] : entries).some(({ delay }) => !delay);\n\n    if (hasImmediateEntry) {\n\n      const {\n        rootNode: _rootNode,\n        subNodes: _subNodes, head, tail,\n        coverNode: _coverNode,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(_subNodes);\n\n      loadListRelatedListeners(_rootNode, list.data, head, tail, _coverNode);\n    }\n  }\n\n  const Return = {\n    /** 调用形式的入口 */\n    enter(entry) {\n      _trigger = _trigger || getActiveElement();\n\n      if (entry) {\n        const { on, target, delay } = entry;\n        return entryHandler({ fromInvoke: true }, on, target, delay);\n      } else {\n        for (const entry of entries) {\n          const { on, type, node, target, delay } = entry;\n          const invokeType = \"invoke\";\n\n          if (type?.some(type => type == null || type === false || type === invokeType) || node == null) {\n            return entryHandler({ fromInvoke: true }, on, target, delay);\n          }\n        }\n        return entryHandler({ fromInvoke: true });\n      }\n    },\n    /** 调用形式的出口 */\n    exit(tempExit) {\n\n      const {\n        subNodes: _list,\n        coverNode: cover,\n        rootNode: root,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n      if (tempExit) {\n        const { on, target: originTarget } = tempExit;\n        const target = element(originTarget);\n        return toExit(target, on);\n      } else {\n        const exits = getExits(exit, onEscape, enabledCover, cover, _trigger);\n        for (const exit of exits) {\n          const { on, type, target } = exit;\n          const invokeType = \"invoke\";\n  \n          if (type?.some(type => type == null || type === false || type === invokeType)) {\n            return toExit(target, on);\n          }\n        }\n      }\n\n      function toExit(target, on) {\n\n        if (list.isEmpty()) list.update(_list);\n\n        return exitHandler({ fromInvoke: true }, on, target, false, cover, list.data, root);\n      }\n    },\n    /** 移除所有的监听事件 */\n    removeListeners() {\n      listListeners.removeListeners();\n      entryListeners.removeListeners();\n    },\n    /** 移除列表相关的事件 */\n    removeListRelatedListeners() {\n      listListeners.removeListeners();\n    },\n    /** 移除入口事件 */\n    removeEntryListeners() {\n      entryListeners.removeListeners();\n    },\n    /** 添加入口的监听事件 */\n    addEntryListeners() {\n      addEntryListeners();\n    },\n    /** 添加列表相关（封面、列表、出口）的监听事件 */\n    addListRelatedListeners() {\n\n      const {\n        rootNode: _rootNode,\n        subNodes: _subNodes,\n        coverNode: _coverNode,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      if (list.isEmpty()) list.update(_subNodes);\n\n      loadListRelatedListeners(_rootNode, list.data, list.head, list.tail, _coverNode);\n    },\n    /** 添加转发 */\n    addForward(id, forward) {\n      let opts = null;\n      if (isFun(forward)) {\n        const {\n          rootNode: root,\n          subNodes: list, head, tail,\n          coverNode: cover,\n        } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n\n        opts = forward({ root, list, head, tail, cover, curI: activeIndex, prevI: prevActive });\n      }\n      else opts = forward;\n\n      const { node: origin_node, on, key, target: origin_target } = opts;\n      const node = element(origin_node);\n      const target = element(origin_target);\n      keyForwards.push(id, node, e => {\n        if (key?.(e, activeIndex)) {\n          e.preventDefault();\n          on?.();\n          tickFocus(target);\n        }\n      });\n    },\n    /** 移除转发 */\n    removeForward(id) {\n      keyForwards.remove(id);\n    },\n    /** 更新列表 */\n    updateList(newList) {\n      const _newList = newList.map(item => element(item)).filter(item => item != null);\n      list.update(_newList);\n    },\n    /** 当前聚焦的列表单项序号 */\n    i(newI) {\n      if (list.has(newI) && trappedList) {\n        prevActive = activeIndex;\n        activeIndex = newI;\n        onMove?.({ e: { fromI: true }, prev: list.data[prevActive], cur: list.data[activeIndex], prevI: prevActive, curI: activeIndex });\n        focus(subNodes[activeIndex]);\n        return newI;\n      }\n      else return activeIndex;\n    },\n  };\n\n  return Return;\n\n  /** 入口 handler */\n  async function entryHandler(e, onEnter, target, delay) {\n\n    // 如果已经在列表或者封面，则不再触发入口；出口不需要该操作，因为不存在从出口退出到出口的子元素的情况，相反，存在入口进入到入口子元素的情况。\n    if (trappedCover || trappedList) return;\n\n    await onEnter?.(e);\n\n    const isImmediate = !delay;\n    if (isImmediate) findNodesToLoadListenersAndFocus();\n    else delayToProcess(delay, findNodesToLoadListenersAndFocus);\n\n    /** 寻找节点，加载事件监听器，聚焦 subNodes 或 coverNode */\n    function findNodesToLoadListenersAndFocus() {\n      const {\n        rootNode: _rootNode,\n        subNodes: _subNodes, head, tail,\n        coverNode: _coverNode,\n      } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n      list.update(_subNodes);\n\n      if (!manual)\n        loadListRelatedListeners(_rootNode, list.data, head, tail, _coverNode);\n      if (target !== false)\n        focusTarget(_coverNode, _subNodes, _rootNode);\n    }\n    \n    function focusTarget(cover, list, rootNode) {\n      const gotTarget = getTarget(target, cover, list, rootNode, enabledCover, activeIndex, list[activeIndex === -1 ? 0 : activeIndex], e);\n      const targetIdx = list.indexOf(gotTarget);\n      if (targetIdx > -1) {\n        prevActive = activeIndex;\n        activeIndex = targetIdx; // 只有在聚焦列表元素时才设置，否则会破坏原有 activeIndex\n        onMove?.({ e, prev: list[prevActive], cur: gotTarget, prevI: prevActive, curI: activeIndex });\n        trappedList = true;\n      }\n      if (enabledCover && (gotTarget === cover || targetIdx > -1)) trappedCover = true;\n      tickFocus(gotTarget);\n    }\n  }\n\n  /** 出口 handler */\n  function exitHandler(e, on, target, delay, cover, list, root, ef) {\n\n    if (!trappedList || \n      !(isFun(ef) ? ef({ e, prev: list[prevActive], cur: list[activeIndex], prevI: prevActive, curI: activeIndex }) : true))\n      return false;\n\n    trappedList = false;\n\n    e.preventDefault?.(); // 阻止默认行为，例如 tab 到下一个元素，例如 entry button 触发 click 事件\n\n    const gotTarget = getTarget(target, cover, list, root, enabledCover, activeIndex, _trigger, e);\n\n    if (gotTarget) return exitListWithTarget();\n    else return exitListWithoutTarget();\n\n    /** 退出列表，有 target */\n    async function exitListWithTarget() {\n\n      await on?.(e);\n\n      delay = delay ?? delayToBlur;\n      const isImmediate = await delayToProcess(delay, focusThenRemoveListeners);\n      if (isImmediate) focusThenRemoveListeners();\n\n      function focusThenRemoveListeners() {\n        focus(gotTarget);\n        onMove?.({ e, prev: list[activeIndex], cur: gotTarget, prevI: activeIndex, curI: -1 });\n        if (!manual) {\n          if (gotTarget !== cover)\n            removeListRelatedListeners();\n          addEntryListeners();\n        }\n      }\n    }\n\n    /** 退出列表，无 target */\n    async function exitListWithoutTarget() {\n\n      if (gotTarget === false) { // 如果显式设为 false，则直接退出，不聚焦，会在一个列表退出另一个列表移动的场景使用\n        await on?.(e);\n        onMove?.({ e, prev: list[activeIndex], cur: null, prevI: activeIndex, curI: -1 });\n        if (!manual) {\n          removeListRelatedListeners();\n          addEntryListeners();\n        }\n        return ;\n      }\n      if (enabledCover) {\n        await on?.(e);\n        onMove?.({ e, prev: list[activeIndex], cur: null, prevI: activeIndex, curI: -1 });\n        focus(cover);\n      } else {\n        await on?.(e);\n\n        delay = delay ?? delayToBlur;\n        const isImmediate = await delayToProcess(delay, focusThenRemoveListeners);\n        if (isImmediate) focusThenRemoveListeners();\n\n        function focusThenRemoveListeners() {\n          _trigger && focus(_trigger);\n          onMove?.({ e, prev: list[activeIndex], cur: null, prevI: activeIndex, curI: -1 });\n          if (!manual) {\n            removeListRelatedListeners();\n            addEntryListeners();\n          }\n        }\n      }\n    }\n  }\n\n  /** 生成事件行为，添加事件监听器 */\n  function loadListRelatedListeners(_rootNode, _subNodes, _head, _tail, _coverNode) {\n\n    if (!listListeners.isEmpty) return ;\n\n    if (_rootNode == null)\n      throw new Error(`没有找到元素 ${rootNode}，您可以尝试 delayToFocus 选项，等待元素 ${rootNode} 渲染完毕后进行聚焦。`);\n    if (_head == null || _tail == null)\n      throw new Error(\"至少需要包含两个可以聚焦的元素，如果元素需要等待渲染，您可以尝试 delayToFocus 选项。\");\n\n    const useActiveIndex = () => [activeIndex, newVal => activeIndex = newVal];\n    const usePrevActive = () => [, prev => prevActive = prev];\n\n    const isTrappedList = () => hasNoEntry ? true : trappedList;\n\n    // 在焦点循环中触发聚焦\n    const keyListMoveHandler = enabledTabSequence ?\n      focusNextListItemBySequence(_subNodes, useActiveIndex, usePrevActive, isClamp, isNext, isPrev, onNext, onPrev, _coverNode, onMove, isTrappedList) :\n      focusNextListItemByRange(_subNodes, isClamp, onNext, onPrev, _rootNode, _coverNode, isTrappedList);\n\n    /** 出口们，列表的出口们，subNodes 的出口们 */\n    const exits = getExits(exit, onEscape, enabledCover, _coverNode, _trigger);\n    const {\n      keyExits, clickExits, focusExits, hasClickExits, hasFocusExits, hasKeyExits,\n      clickExits_wild, focusExits_wild,\n      outListExits,\n    } = splitExits(exits, _rootNode);\n\n    /** 非跟节点内的，是跟节点之外的出口 */\n    const clickListExitHandlers_wild = clickExits_wild.map(exit => [element(exit?.node), clickListExitHandler_wild(exit)]);\n    const focusListExitHandlers_wild = focusExits_wild.map(exit => [element(exit?.node), focusListExitHandler_wild(exit)]);\n\n    // 添加除 trigger 以外其它和焦点相关的事件监听器\n    addListRelatedListeners();\n\n    let isMouseDown = false;\n    /** 标记是否从封面进入列表，用于防止纠正列表焦点的误判，用于野生封面 */\n    let isEnterFromCover = false;\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |          LIST HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    function focusTrapListHandler(e) {\n\n      const focusTarget = e.target;\n\n      // 进入封面（封面在列表中）\n      if (enabledCover && focusTarget === _coverNode) {\n        trappedCover = true;\n        return ;\n      }\n\n      // 纠正进入封面，从外部进入列表，如果没有通过封面，则重新聚焦封面\n      if (enabledCover && isMouseDown === false && trappedCover === false) {\n        tickFocus(_coverNode);\n        return ;\n      }\n\n      // 纠正外部聚焦进来的焦点\n      if (correctionTarget !== false && enabledTabSequence && trappedList === false && isMouseDown === false) // 如果是内部的聚焦，无需纠正，防止嵌套情况的循环问题\n      {\n        const originGotCorrectionTarget = correctionTarget?.({ list: _subNodes, cover: _coverNode, root: _rootNode, last: _subNodes[activeIndex], lastI: activeIndex }) ?? (activeIndex === -1 ? _subNodes[0] : _subNodes[activeIndex]);\n        const gotCorrectionTarget = element(originGotCorrectionTarget);\n        const targetIndex = _subNodes.findIndex(item => item === gotCorrectionTarget);\n        if (targetIndex > -1) {\n          prevActive = activeIndex;\n          activeIndex = targetIndex;\n          onMove?.({ e, prev: _subNodes[prevActive], cur: _subNodes[activeIndex], prevI: prevActive, curI: activeIndex });\n        }\n        tickFocus(gotCorrectionTarget);\n      }\n\n      trappedList = true;\n    }\n\n    function blurTrapListHandler(e) {\n      // 用于保护可切换的入口能够被触发\n      if (toggles.has(e.relatedTarget)) return;\n\n      setTimeout(() => { // 延迟后获取下一次聚焦的元素，否则当前聚焦元素是 body\n\n        const active = getActiveElement();\n        const isOutRootNode = !_rootNode.contains(active);\n        const isActiveCover = active === _coverNode;\n\n        // 从封面退出\n        if (e.target === _coverNode && isOutRootNode) {\n          trappedCover = false; // 退出封面\n          return;\n        }\n\n        let isOutList = null;\n        if (isActiveCover || isOutRootNode) isOutList = outListExitHandler(e);\n        if (isOutList === false) return; // 不符合退出列表的条件\n\n        if (isActiveCover) { // 聚焦在封面\n          trappedList = false;\n        } else if (isOutRootNode) { // 聚焦在非封面、非列表的区域\n          trappedList = false;\n          trappedCover = false;\n        }\n      });\n    }\n\n    function mousedownListItemHandler(e) {\n      isMouseDown = true;\n      setTimeout(() => {\n        isMouseDown = false; // mousedown 没有出口，只能使用定时器，isMouseDown 主要在两个 focus 事件中使用，当触发 focus 时，此定时器还未执行，以此保证正确性\n      });\n\n      let targetItem;\n      if (!enabledTabSequence ||\n        (enabledTabSequence && (targetItem = _subNodes.find(item => item.contains(e.target))))) {\n        trappedList = true;\n        if (enabledCover) trappedCover = true;\n        if (allowSafariToFocusAfterMousedown && targetItem && window.safari !== undefined) { // 兼容 Safari（桌面端），具体问题查看：https://github.com/wswmsword/web-experiences/tree/main/browser/safari-button-focus\n          focus(targetItem); // Safari 不会聚焦按钮元素，这里强制使用 api 聚焦\n          e.preventDefault(); // 阻止默认行为可以避免 targetItem 失焦\n        }\n      }\n    }\n\n    /** 点击聚焦列表某一单项 */\n    function clickListItemHandler(e) {\n      const target = e.target;\n      const targetIndex = _subNodes.findIndex(e => e.contains(target));\n      if (targetIndex > -1) {\n        prevActive = activeIndex;\n        activeIndex = targetIndex;\n\n        onClick?.({ e, prev: _subNodes[prevActive], cur: _subNodes[activeIndex], prevI: prevActive, curI: activeIndex });\n        if (prevActive !== activeIndex || trappedList === false)\n          onMove?.({ e, prev: _subNodes[prevActive], cur: _subNodes[activeIndex], prevI: prevActive, curI: activeIndex });\n      }\n    }\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |         COVER HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    function focusTrapCoverHandler() { trappedCover = true; } // 捕获点击封面的情况\n\n    function blurTrapCoverHandler() { // 捕获点击空白区域的情况\n      if (isEnterFromCover) { // 用于防止纠正列表焦点的误判，如果是进入列表，则 trappedCover 还应是 true\n        isEnterFromCover = false;\n        return;\n      }\n      trappedCover = false;\n    }\n\n    /** 封面的键盘事件响应 */\n    function keyCoverHandler(e) {\n      if (e.target !== _coverNode) return;\n      if (!(trappedCover && !trappedList)) return; // 继续执行，必须满足焦点在封面上，且不在列表中\n\n      // 入口\n      if((coverEnterKey ?? isEnterEvent)(e) && !trappedList) {\n        e.preventDefault();\n        isEnterFromCover = true;\n        trappedList = true\n        onEnterCover?.(e);\n        activeIndex = activeIndex === -1 ? 0 : activeIndex;\n        focus(_subNodes[activeIndex]);\n        onMove?.({ e, prev: null, cur: _subNodes[activeIndex], prevI: null, curI: activeIndex });\n        return;\n      }\n\n      // 出口\n      for (let exit of exitsCover) {\n        const { key, on, target: origin } = exit;\n        const target = element(origin);\n        if (key?.(e, activeIndex)) {\n          exitCoverHandler(e, on, target);\n          return;\n        }\n      }\n\n      // 默认出口\n      if (isDefaultExitCover &&\n        isTabForward(e)) { // 虽然也是离开列表，但是这里不移除监听事件，因为移除后就不能再次进入封面\n        focus(_tail);\n        return;\n      }\n\n      /** 退出封面焦点的行为 */\n      function exitCoverHandler(e, onExit, target) {\n        onExit?.(e);\n        target && focus(target);\n        removeListRelatedListeners();\n      }\n    }\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |            + START +            |\n     |          EXIT HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    function outListExitHandler(e) {\n      for (const exit of outListExits) {\n        const { on, target: origin_target, delay } = exit;\n        const target = element(origin_target);\n        return exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n      }\n    }\n\n    function clickExitHandler(e, exit) {\n      const { node: origin_node, on, target: origin_target, delay } = exit;\n      const node = element(origin_node);\n      const target = element(origin_target);\n\n      if (\n        (node != null && !node.contains(e.target)) ||\n        node == null) return false;\n      exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n      return true;\n    }\n\n    /** 点击列表的出口 */\n    function clickListExitHandler(e) {\n      for (const exit of clickExits) {\n        const isOK = clickExitHandler(e, exit);\n        if (isOK) break;\n      }\n    }\n\n    function focusExitHandler(e, exit) {\n      const { node: origin_node, on, target: origin_target, delay } = exit;\n      const node = element(origin_node);\n      const target = element(origin_target);\n\n      if (\n        (node != null && e.target !== node) ||\n        node == null) return false;\n      exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n      return true;\n    }\n\n    /** 聚焦列表一个单项而退出 */\n    function focusListExitHandler(e) {\n\n      for (const exit of focusExits) {\n        const isOK = focusExitHandler(e, exit)\n        if (isOK) break;\n      }\n    }\n\n    function keyExitHandler(e, exit) {\n      let { key, node: origin_node, target, on, delay } = exit;\n      const node = element(origin_node);\n      if (node != null && e.target !== node) return false;\n      if (key?.(e, activeIndex)) {\n        exitHandler(e, on, target, delay, _coverNode, _subNodes, _rootNode, exit.if);\n        return true;\n      }\n    }\n\n    /** 触发键盘退出列表，退出列表焦点 */\n    function keyListExitHandler(e) {\n      if (e.target === _coverNode) return; // 被封面触发直接返回\n\n      if (disabledEsc && isEscapeEvent(e)) return;\n\n      for (const exit of keyExits) {\n        const isOK = keyExitHandler(e, exit);\n        if (isOK) break;\n      }\n    }\n\n    function clickListExitHandler_wild(exit) {\n      return function(e) { clickExitHandler(e, exit); }\n    }\n\n    function focusListExitHandler_wild(exit) {\n      return function(e) { focusExitHandler(e, exit); }\n    }\n\n    /*~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~+\n     |             - END -             |\n     |          EXIT HANDLERS          |\n     +~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~*/\n\n    /** 添加焦点需要的事件监听器 */\n    function addListRelatedListeners() {\n\n      listListeners.push(_rootNode, \"focusin\", focusTrapListHandler);\n\n      listListeners.push(_rootNode, \"focusout\", blurTrapListHandler);\n\n      if (!_rootNode.contains(_coverNode) && _coverNode != null) {\n\n        listListeners.push(_coverNode, \"focus\", focusTrapCoverHandler);\n\n        listListeners.push(_coverNode, \"blur\", blurTrapCoverHandler);\n      }\n\n      listListeners.push(_rootNode, \"keydown\", e => {\n        // 列表中移动，监听移动的键盘事件，例如 tab 或其它自定义组合键\n        keyListMoveHandler(e);\n        // 列表键盘出口\n        if (hasKeyExits) keyListExitHandler(e);\n      });\n\n      if (enabledTabSequence) {\n        // 点击聚焦列表单项，只在手动列表时监听点击，因为自动模式不需要记录 activeIndex\n        listListeners.push(_rootNode, \"click\", clickListItemHandler);\n      }\n\n      // 由于 click 事件在 focus 之后，这里用来判断是否通过点击进入列表，用于纠错未知进入列表的焦点定位\n      listListeners.push(_rootNode, \"mousedown\", mousedownListItemHandler);\n\n      if (hasClickExits) {\n        // 列表点击出口\n        listListeners.push(_rootNode, \"click\", clickListExitHandler);\n      }\n\n      if (hasFocusExits) {\n        // 列表聚焦出口\n        listListeners.push(_rootNode, \"focusin\", focusListExitHandler);\n      }\n\n      // 非列表内的出口\n      focusListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"focus\", handler);\n      });\n      clickListExitHandlers_wild.forEach(([node, handler]) => {\n        listListeners.push(node, \"click\", handler);\n      });\n\n      if (_coverNode != null) {\n        // 封面的事件\n        listListeners.push(_coverNode, \"keydown\", keyCoverHandler);\n      }\n\n      // flush\n      listListeners.addListeners();\n    };\n  }\n\n  /** 添加入口事件 */\n  function addEntryListeners() {\n\n    if (!entryListeners.isEmpty) return;\n\n    for (let entry of entries) {\n      const { node: origin, on, key, type, target, delay, onExit } = entry;\n      const ef = entry.if;\n      const types = [].concat(type);\n      const allTypes = [\"keydown\", \"focus\", \"click\"];\n      const node = element(origin);\n\n      types.forEach(type => {\n        if (node && allTypes.includes(type)) {\n          const handler = type === \"keydown\"\n            ? entryKeyHandler\n            : entryNotKeyHandler;\n          entryListeners.push(node, type, handler); // 保存事件信息\n        }\n      });\n\n      function entryKeyHandler(e) {\n        if (key?.(e, activeIndex) && \n          (isFun(ef) ? ef({ e, prev: list.data[prevActive], cur: list.data[activeIndex], prevI: prevActive, curI: activeIndex }) : true))\n          toggleEntryAndExit(e, true)\n      }\n    \n      function entryNotKeyHandler(e) {\n        if (!(isFun(ef) ? ef({ e, prev: list.data[prevActive], cur: list.data[activeIndex], prevI: prevActive, curI: activeIndex }) : true))\n          return;\n        toggleEntryAndExit(e)\n      }\n\n      function toggleEntryAndExit(e, isKey) {\n        if (trappedList) {\n          if (isFun(onExit)) {\n            const {\n              subNodes: list,\n              coverNode: cover,\n              rootNode: root,\n            } = getKeyNodes(rootNode, subNodes, coverNode, coverIsRoot);\n            isKey && e.preventDefault();\n            exitHandler(e, onExit, target, false, cover, list, root);\n          }\n        }\n        else {\n          isKey && e.preventDefault();\n          entryHandler(e, on, target, delay);\n          if (removeListenersEachEnter && !manual)\n            entryListeners.removeListeners();\n        }\n      }\n    }\n\n    // flush\n    entryListeners.addListeners();\n  }\n\n  /** 移除监听事件 */\n  function removeListRelatedListeners() {\n\n    // 如果是默认的，没有定义出口的封面，则不移除事件\n    if (isDefaultExitCover) return;\n\n    if (removeListenersEachExit && !manual) {\n      listListeners.removeListeners();\n    }\n  }\n};\n\nexport default focusNoJutsu;"],"names":["objToStr","obj","Object","prototype","toString","call","isObj","isFun","fun","getActiveElement","document","activeElement","querySelector","str","element","e","tick","fn","setTimeout","isSelectableInput","node","tagName","toLowerCase","select","isEnterEvent","key","keyCode","isEscapeEvent","isTabEvent","isTabForward","shiftKey","isTabBackward","findLowestCommonAncestorNode","x","y","contains","range","Range","setStartBefore","setEndAfter","collapsed","commonAncestorContainer","focus","tickFocus","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","stop","_x","apply","arguments","focusNextListItemBySequence","subNodes","useActiveIndex","usePrevActive","isClamp","isNext","isPrev","onNext","onPrev","coverNode","onMove","trappedList","target","_useActiveIndex","index_","setIndex","_usePrevActive","setPrev","index","Math","max","itemsLen","length","incresedI","nextI","min","cur","prevI","curI","preventDefault","decresedI","focusNextListItemByRange","list","rootNode","head","tail","at","current","getKeyNodes","root","cover","coverIsRoot","_element","_list","map","item","filter","slice","_root","_cover","nodesReducer","acc","isAryNodes","Array","isArray","nodes","n","_extends","concat","splitExits","exits","isInnerRoot","_exits$reduce","reduce","click","click_wild","focus_wild","outList","includeType","type","_e$type","includes","fill","keyExits","clickExits","focusExits","clickExits_wild","focusExits_wild","outListExits","hasClickExits","hasFocusExits","hasKeyExits","getExits","exit","onEscape","enabledCover","trigger","_tempExits$0$on","_tempExits$","tempExits","o","ele","undefined","t","_onEscape","on","escapeExit","getDelayType","delay","isFunctionDelay","delayRes","promiseDelay","callbackDelay","commonDelay","delayToProcess","_ref2","_callee2","processor","_ref3","_callee2$","_context2","_x2","_x3","getTarget","activeIndex","defaultTarget","gotTarget","last","lastI","ListenersCache","cache","isEmpty","_proto","push","handler","clean","addListeners","forEach","l","_l$node","addEventListener","removeListeners","_l$node2","removeEventListener","KeyForwardCache","Map","_proto2","has","id","set","remove","_this","ids","get","TabList","data","_proto3","update","splice","i","focusNoJutsu","_ref4","_entries$","offset","options","Error","sequence","loop","entry","onClick","initialActive","correctionTarget","delayToFocus","delayToBlur","_options$removeListen","removeListenersEachExit","removeListenersEachEnter","manual","_options$allowSafariT","allowSafariToFocusAfterMousedown","demo","_ref5","coverEnterKey","enterKey","onEnterCover","onEnter","exitCover","entries","_entry$delay","onExit","hasNoEntry","toggles","Set","_trigger","exitsCover","_e$target","isDefaultExitCover","disabledEsc","_ref6","_ref7","enabledTabSequence","prevActive","listListeners","trappedCover","entryListeners","keyForwards","addEntryListeners","hasImmediateEntry","some","_ref8","_getKeyNodes","_rootNode","_subNodes","_coverNode","loadListRelatedListeners","Return","enter","entryHandler","fromInvoke","_loop","_step","value","invokeType","v","_iterator","_createForOfIteratorHelperLoose","done","_ret","tempExit","_getKeyNodes2","originTarget","toExit","_loop2","_step2","_iterator2","_ret2","exitHandler","removeListRelatedListeners","removeEntryListeners","addListRelatedListeners","_getKeyNodes3","addForward","forward","opts","_getKeyNodes4","_opts","origin_node","origin_target","removeForward","updateList","newList","_newList","newI","fromI","_x4","_x5","_x6","_x7","_entryHandler","_callee5","isImmediate","findNodesToLoadListenersAndFocus","focusTarget","_callee5$","_context5","_focusTarget","targetIdx","indexOf","_findNodesToLoadListe","_getKeyNodes6","ef","_e$preventDefault","exitListWithTarget","exitListWithoutTarget","_exitListWithTarget","_callee3","_delay","focusThenRemoveListeners","_callee3$","_context3","_focusThenRemoveListe","sent","_exitListWithoutTarget","_callee4","_delay2","_callee4$","_context4","_head","_tail","newVal","isTrappedList","keyListMoveHandler","_splitExits","clickListExitHandlers_wild","clickListExitHandler_wild","focusListExitHandlers_wild","focusListExitHandler_wild","isMouseDown","isEnterFromCover","focusTrapListHandler","_correctionTarget","originGotCorrectionTarget","gotCorrectionTarget","targetIndex","findIndex","blurTrapListHandler","relatedTarget","active","isOutRootNode","isActiveCover","isOutList","outListExitHandler","mousedownListItemHandler","targetItem","find","window","safari","clickListItemHandler","focusTrapCoverHandler","blurTrapCoverHandler","keyCoverHandler","_iterator3","_step3","origin","exitCoverHandler","_iterator4","_step4","clickExitHandler","clickListExitHandler","_iterator5","_step5","isOK","focusExitHandler","focusListExitHandler","_iterator6","_step6","keyExitHandler","keyListExitHandler","_iterator7","_step7","_ref9","_ref10","_loop3","_step8","types","allTypes","entryKeyHandler","entryNotKeyHandler","toggleEntryAndExit","isKey","_getKeyNodes5","_iterator8"],"mappings":"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"}